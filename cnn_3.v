// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        poolout_1_address0,
        poolout_1_ce0,
        poolout_1_q0,
        poolout_1_address1,
        poolout_1_ce1,
        poolout_1_q1
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [11:0] poolout_1_address0;
output   poolout_1_ce0;
input  [31:0] poolout_1_q0;
output  [11:0] poolout_1_address1;
output   poolout_1_ce1;
input  [31:0] poolout_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg[11:0] poolout_1_address0;
reg poolout_1_ce0;
reg[11:0] poolout_1_address1;
reg poolout_1_ce1;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] b_weight_2_address0;
reg    b_weight_2_ce0;
wire   [31:0] b_weight_2_q0;
wire   [6:0] weights_2_0_address0;
reg    weights_2_0_ce0;
wire   [31:0] weights_2_0_q0;
wire   [6:0] weights_2_1_address0;
reg    weights_2_1_ce0;
wire   [31:0] weights_2_1_q0;
wire   [6:0] weights_2_2_address0;
reg    weights_2_2_ce0;
wire   [31:0] weights_2_2_q0;
wire   [6:0] weights_2_3_address0;
reg    weights_2_3_ce0;
wire   [31:0] weights_2_3_q0;
wire   [6:0] weights_2_4_address0;
reg    weights_2_4_ce0;
wire   [31:0] weights_2_4_q0;
wire   [6:0] weights_2_5_address0;
reg    weights_2_5_ce0;
wire   [31:0] weights_2_5_q0;
wire   [6:0] weights_2_6_address0;
reg    weights_2_6_ce0;
wire   [31:0] weights_2_6_q0;
wire   [6:0] weights_2_7_address0;
reg    weights_2_7_ce0;
wire   [31:0] weights_2_7_q0;
wire   [6:0] weights_2_8_address0;
reg    weights_2_8_ce0;
wire   [31:0] weights_2_8_q0;
reg   [31:0] reg_491;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
reg   [31:0] reg_496;
reg   [31:0] reg_501;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_483_p2;
reg   [31:0] reg_506;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_487_p2;
reg   [31:0] reg_512;
reg   [31:0] reg_518;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_479_p2;
reg   [31:0] reg_523;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state28;
wire   [3:0] indvarinc_fu_528_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_539_p2;
wire   [4:0] k_10_fu_551_p2;
reg   [4:0] k_10_reg_1089;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond4_fu_545_p2;
wire   [12:0] tmp_72_cast_fu_562_p1;
reg   [12:0] tmp_72_cast_reg_1099;
wire    ap_CS_fsm_state4;
wire   [8:0] tmp_123_cast_fu_574_p1;
reg   [8:0] tmp_123_cast_reg_1104;
reg   [31:0] b_weight_2_load_reg_1109;
wire   [9:0] tmp_91_fu_614_p2;
reg   [9:0] tmp_91_reg_1117;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond3_fu_578_p2;
wire   [8:0] tmp_93_fu_632_p2;
reg   [8:0] tmp_93_reg_1124;
wire   [9:0] tmp_96_fu_662_p2;
reg   [9:0] tmp_96_reg_1129;
wire   [4:0] i_10_fu_668_p2;
reg   [4:0] i_10_reg_1136;
wire   [9:0] tmp_99_fu_698_p2;
reg   [9:0] tmp_99_reg_1141;
wire   [12:0] tmp_138_cast_fu_725_p3;
reg   [12:0] tmp_138_cast_reg_1151;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond2_fu_704_p2;
wire   [12:0] tmp_141_cast_fu_742_p3;
reg   [12:0] tmp_141_cast_reg_1156;
wire   [12:0] tmp_144_cast_fu_759_p3;
reg   [12:0] tmp_144_cast_reg_1161;
reg   [11:0] output_addr_reg_1166;
wire   [12:0] tmp_151_cast_fu_803_p3;
reg   [12:0] tmp_151_cast_reg_1171;
wire   [12:0] tmp_154_cast_fu_820_p3;
reg   [12:0] tmp_154_cast_reg_1176;
wire   [12:0] tmp_157_cast_fu_837_p3;
reg   [12:0] tmp_157_cast_reg_1181;
wire   [3:0] j_8_fu_845_p2;
reg   [3:0] j_8_reg_1186;
wire   [12:0] tmp_160_cast_fu_860_p3;
reg   [12:0] tmp_160_cast_reg_1191;
wire   [12:0] tmp_163_cast_fu_877_p3;
reg   [12:0] tmp_163_cast_reg_1196;
wire   [12:0] tmp_166_cast_fu_894_p3;
reg   [12:0] tmp_166_cast_reg_1201;
wire   [3:0] t_1_fu_908_p2;
reg   [3:0] t_1_reg_1209;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond1_fu_902_p2;
wire   [12:0] tmp_103_fu_942_p2;
reg   [12:0] tmp_103_reg_1224;
wire   [12:0] tmp_104_fu_947_p2;
reg   [12:0] tmp_104_reg_1229;
wire   [12:0] tmp_105_fu_952_p2;
reg   [12:0] tmp_105_reg_1234;
wire   [12:0] tmp_106_fu_957_p2;
reg   [12:0] tmp_106_reg_1239;
wire   [12:0] tmp_107_fu_962_p2;
reg   [12:0] tmp_107_reg_1244;
wire   [12:0] tmp_108_fu_967_p2;
reg   [12:0] tmp_108_reg_1249;
wire   [12:0] tmp_109_fu_972_p2;
reg   [12:0] tmp_109_reg_1254;
wire   [63:0] tmp_176_cast_fu_982_p1;
reg   [63:0] tmp_176_cast_reg_1259;
reg   [31:0] weights_2_0_load_reg_1300;
reg   [31:0] weights_2_1_load_reg_1305;
reg   [31:0] weights_2_2_load_reg_1330;
reg   [31:0] poolout_1_load_3_reg_1335;
reg   [31:0] weights_2_3_load_reg_1340;
wire    ap_CS_fsm_state10;
reg   [31:0] poolout_1_load_4_reg_1370;
reg   [31:0] weights_2_4_load_reg_1375;
reg   [31:0] poolout_1_load_5_reg_1380;
reg   [31:0] weights_2_5_load_reg_1385;
reg   [31:0] weights_2_6_load_reg_1395;
reg   [31:0] weights_2_7_load_reg_1400;
reg   [31:0] weights_2_8_load_reg_1405;
wire   [3:0] x_1_fu_1022_p2;
reg   [3:0] x_1_reg_1413;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond_fu_1016_p2;
wire   [31:0] conv_buf_q0;
reg   [31:0] conv_buf_load_reg_1423;
reg   [3:0] conv_buf_address0;
reg    conv_buf_ce0;
reg    conv_buf_we0;
reg   [31:0] conv_buf_d0;
reg   [3:0] conv_buf_address1;
reg    conv_buf_ce1;
reg    conv_buf_we1;
reg   [31:0] conv_buf_d1;
reg   [3:0] invdar_reg_412;
reg   [4:0] k_reg_423;
reg   [4:0] i_reg_435;
reg   [3:0] j_reg_446;
wire    ap_CS_fsm_state29;
reg   [3:0] t_reg_457;
reg   [3:0] x_reg_468;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_1_fu_534_p1;
wire   [63:0] tmp_72_fu_557_p1;
wire   [63:0] tmp_148_cast_fu_789_p1;
wire   [63:0] tmp_167_cast_fu_927_p1;
wire   [63:0] tmp_168_cast_fu_937_p1;
wire   [63:0] tmp_169_cast_fu_988_p1;
wire   [63:0] tmp_170_cast_fu_992_p1;
wire   [63:0] tmp_171_cast_fu_996_p1;
wire   [63:0] tmp_172_cast_fu_1000_p1;
wire   [63:0] tmp_173_cast_fu_1004_p1;
wire   [63:0] tmp_174_cast_fu_1008_p1;
wire   [63:0] tmp_175_cast_fu_1012_p1;
wire   [63:0] tmp_89_fu_1028_p1;
reg   [31:0] grp_fu_479_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_483_p0;
reg   [31:0] grp_fu_483_p1;
reg   [31:0] grp_fu_487_p0;
reg   [31:0] grp_fu_487_p1;
wire   [7:0] tmp_76_fu_566_p3;
wire   [4:0] tmp_73_fu_584_p2;
wire   [8:0] tmp_77_fu_590_p3;
wire   [5:0] tmp_79_fu_602_p3;
wire   [9:0] p_shl6_cast_fu_598_p1;
wire   [9:0] p_shl7_cast_fu_610_p1;
wire   [6:0] tmp_92_fu_620_p3;
wire   [8:0] p_shl5_cast_fu_628_p1;
wire   [8:0] tmp_94_fu_638_p3;
wire   [5:0] tmp_95_fu_650_p3;
wire   [9:0] p_shl2_cast_fu_646_p1;
wire   [9:0] p_shl3_cast_fu_658_p1;
wire   [8:0] tmp_97_fu_674_p3;
wire   [5:0] tmp_98_fu_686_p3;
wire   [9:0] p_shl_cast_fu_682_p1;
wire   [9:0] p_shl1_cast_fu_694_p1;
wire   [3:0] tmp_74_fu_710_p2;
wire   [9:0] tmp_1_8_fu_716_p1;
wire   [9:0] tmp_42_fu_720_p2;
wire   [9:0] tmp_43_fu_733_p1;
wire   [9:0] tmp_44_fu_737_p2;
wire   [9:0] tmp_45_fu_750_p1;
wire   [9:0] tmp_46_fu_754_p2;
wire   [8:0] tmp_47_fu_767_p1;
wire   [8:0] tmp_48_fu_771_p2;
wire   [12:0] tmp_147_cast_fu_776_p3;
wire   [12:0] tmp_100_fu_784_p2;
wire   [9:0] tmp_49_fu_794_p1;
wire   [9:0] tmp_50_fu_798_p2;
wire   [9:0] tmp_51_fu_811_p1;
wire   [9:0] tmp_52_fu_815_p2;
wire   [9:0] tmp_53_fu_828_p1;
wire   [9:0] tmp_54_fu_832_p2;
wire   [9:0] tmp_55_fu_851_p1;
wire   [9:0] tmp_56_fu_855_p2;
wire   [9:0] tmp_57_fu_868_p1;
wire   [9:0] tmp_58_fu_872_p2;
wire   [9:0] tmp_59_fu_885_p1;
wire   [9:0] tmp_60_fu_889_p2;
wire   [12:0] tmp_79_cast_fu_918_p1;
wire   [12:0] tmp_101_fu_922_p2;
wire   [12:0] tmp_102_fu_932_p2;
wire   [8:0] tmp_79_cast8_fu_914_p1;
wire   [8:0] tmp_110_fu_977_p2;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

cnn_3_b_weight_2 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b_weight_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_weight_2_address0),
    .ce0(b_weight_2_ce0),
    .q0(b_weight_2_q0)
);

cnn_3_weights_2_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_0_address0),
    .ce0(weights_2_0_ce0),
    .q0(weights_2_0_q0)
);

cnn_3_weights_2_1 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_1_address0),
    .ce0(weights_2_1_ce0),
    .q0(weights_2_1_q0)
);

cnn_3_weights_2_2 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_2_address0),
    .ce0(weights_2_2_ce0),
    .q0(weights_2_2_q0)
);

cnn_3_weights_2_3 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_3_address0),
    .ce0(weights_2_3_ce0),
    .q0(weights_2_3_q0)
);

cnn_3_weights_2_4 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_4_address0),
    .ce0(weights_2_4_ce0),
    .q0(weights_2_4_q0)
);

cnn_3_weights_2_5 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_5_address0),
    .ce0(weights_2_5_ce0),
    .q0(weights_2_5_q0)
);

cnn_3_weights_2_6 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_6_address0),
    .ce0(weights_2_6_ce0),
    .q0(weights_2_6_q0)
);

cnn_3_weights_2_7 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_7_address0),
    .ce0(weights_2_7_ce0),
    .q0(weights_2_7_q0)
);

cnn_3_weights_2_8 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weights_2_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_2_8_address0),
    .ce0(weights_2_8_ce0),
    .q0(weights_2_8_q0)
);

cnn_1_conv_buf #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_buf_address0),
    .ce0(conv_buf_ce0),
    .we0(conv_buf_we0),
    .d0(conv_buf_d0),
    .q0(conv_buf_q0),
    .address1(conv_buf_address1),
    .ce1(conv_buf_ce1),
    .we1(conv_buf_we1),
    .d1(conv_buf_d1)
);

keywords_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fadd_32nbkb_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_518),
    .din1(grp_fu_479_p1),
    .ce(1'b1),
    .dout(grp_fu_479_p2)
);

keywords_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fmul_32ncud_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_483_p0),
    .din1(grp_fu_483_p1),
    .ce(1'b1),
    .dout(grp_fu_483_p2)
);

keywords_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fmul_32ncud_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_487_p0),
    .din1(grp_fu_487_p1),
    .ce(1'b1),
    .dout(grp_fu_487_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_704_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_435 <= i_10_reg_1136;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_435 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_412 <= indvarinc_fu_528_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_412 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_578_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_446 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        j_reg_446 <= j_8_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_578_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_reg_423 <= k_10_reg_1089;
    end else if (((tmp_s_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_423 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1016_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        t_reg_457 <= t_1_reg_1209;
    end else if (((exitcond2_fu_704_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_reg_457 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        x_reg_468 <= x_1_reg_1413;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x_reg_468 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_weight_2_load_reg_1109 <= b_weight_2_q0;
        tmp_123_cast_reg_1104[7 : 3] <= tmp_123_cast_fu_574_p1[7 : 3];
        tmp_72_cast_reg_1099[4 : 0] <= tmp_72_cast_fu_562_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_buf_load_reg_1423 <= conv_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_578_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_10_reg_1136 <= i_10_fu_668_p2;
        tmp_91_reg_1117[9 : 1] <= tmp_91_fu_614_p2[9 : 1];
        tmp_93_reg_1124[8 : 2] <= tmp_93_fu_632_p2[8 : 2];
        tmp_96_reg_1129[9 : 1] <= tmp_96_fu_662_p2[9 : 1];
        tmp_99_reg_1141[9 : 1] <= tmp_99_fu_698_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_704_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_8_reg_1186 <= j_8_fu_845_p2;
        output_addr_reg_1166 <= tmp_148_cast_fu_789_p1;
        tmp_138_cast_reg_1151[12 : 3] <= tmp_138_cast_fu_725_p3[12 : 3];
        tmp_141_cast_reg_1156[12 : 3] <= tmp_141_cast_fu_742_p3[12 : 3];
        tmp_144_cast_reg_1161[12 : 3] <= tmp_144_cast_fu_759_p3[12 : 3];
        tmp_151_cast_reg_1171[12 : 3] <= tmp_151_cast_fu_803_p3[12 : 3];
        tmp_154_cast_reg_1176[12 : 3] <= tmp_154_cast_fu_820_p3[12 : 3];
        tmp_157_cast_reg_1181[12 : 3] <= tmp_157_cast_fu_837_p3[12 : 3];
        tmp_160_cast_reg_1191[12 : 3] <= tmp_160_cast_fu_860_p3[12 : 3];
        tmp_163_cast_reg_1196[12 : 3] <= tmp_163_cast_fu_877_p3[12 : 3];
        tmp_166_cast_reg_1201[12 : 3] <= tmp_166_cast_fu_894_p3[12 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_10_reg_1089 <= k_10_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_1_load_3_reg_1335 <= poolout_1_q1;
        weights_2_2_load_reg_1330 <= weights_2_2_q0;
        weights_2_3_load_reg_1340 <= weights_2_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        poolout_1_load_4_reg_1370 <= poolout_1_q0;
        poolout_1_load_5_reg_1380 <= poolout_1_q1;
        weights_2_4_load_reg_1375 <= weights_2_4_q0;
        weights_2_5_load_reg_1385 <= weights_2_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_491 <= poolout_1_q0;
        reg_496 <= poolout_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_501 <= poolout_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_506 <= grp_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_512 <= grp_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_518 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_523 <= grp_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_1_reg_1209 <= t_1_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_902_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_103_reg_1224 <= tmp_103_fu_942_p2;
        tmp_104_reg_1229 <= tmp_104_fu_947_p2;
        tmp_105_reg_1234 <= tmp_105_fu_952_p2;
        tmp_106_reg_1239 <= tmp_106_fu_957_p2;
        tmp_107_reg_1244 <= tmp_107_fu_962_p2;
        tmp_108_reg_1249 <= tmp_108_fu_967_p2;
        tmp_109_reg_1254 <= tmp_109_fu_972_p2;
        tmp_176_cast_reg_1259[8 : 0] <= tmp_176_cast_fu_982_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_2_0_load_reg_1300 <= weights_2_0_q0;
        weights_2_1_load_reg_1305 <= weights_2_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_2_6_load_reg_1395 <= weights_2_6_q0;
        weights_2_7_load_reg_1400 <= weights_2_7_q0;
        weights_2_8_load_reg_1405 <= weights_2_8_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        x_1_reg_1413 <= x_1_fu_1022_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond4_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_weight_2_ce0 = 1'b1;
    end else begin
        b_weight_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_buf_address0 = tmp_89_fu_1028_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_buf_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_buf_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_buf_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_buf_address0 = tmp_1_fu_534_p1;
    end else begin
        conv_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_buf_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_buf_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_buf_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_buf_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_address1 = 64'd1;
    end else begin
        conv_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_ce0 = 1'b1;
    end else begin
        conv_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_ce1 = 1'b1;
    end else begin
        conv_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        conv_buf_d0 = reg_512;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_d0 = reg_506;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_buf_d0 = 32'd0;
    end else begin
        conv_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        conv_buf_d1 = reg_506;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_d1 = reg_512;
    end else begin
        conv_buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_we0 = 1'b1;
    end else begin
        conv_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_we1 = 1'b1;
    end else begin
        conv_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_479_p1 = b_weight_2_load_reg_1109;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_479_p1 = conv_buf_load_reg_1423;
    end else begin
        grp_fu_479_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_483_p0 = poolout_1_load_4_reg_1370;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_483_p0 = reg_501;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_483_p0 = reg_491;
    end else begin
        grp_fu_483_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_483_p1 = weights_2_8_load_reg_1405;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_483_p1 = weights_2_6_load_reg_1395;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_483_p1 = weights_2_4_load_reg_1375;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_483_p1 = weights_2_2_load_reg_1330;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_483_p1 = weights_2_0_load_reg_1300;
    end else begin
        grp_fu_483_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_487_p0 = poolout_1_load_5_reg_1380;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_487_p0 = poolout_1_load_3_reg_1335;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_487_p0 = reg_496;
    end else begin
        grp_fu_487_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_487_p1 = weights_2_7_load_reg_1400;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_487_p1 = weights_2_5_load_reg_1385;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_487_p1 = weights_2_3_load_reg_1340;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_487_p1 = weights_2_1_load_reg_1305;
    end else begin
        grp_fu_487_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        poolout_1_address0 = tmp_175_cast_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        poolout_1_address0 = tmp_173_cast_fu_1004_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_1_address0 = tmp_171_cast_fu_996_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        poolout_1_address0 = tmp_169_cast_fu_988_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        poolout_1_address0 = tmp_167_cast_fu_927_p1;
    end else begin
        poolout_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        poolout_1_address1 = tmp_174_cast_fu_1008_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_1_address1 = tmp_172_cast_fu_1000_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        poolout_1_address1 = tmp_170_cast_fu_992_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        poolout_1_address1 = tmp_168_cast_fu_937_p1;
    end else begin
        poolout_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        poolout_1_ce0 = 1'b1;
    end else begin
        poolout_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        poolout_1_ce1 = 1'b1;
    end else begin
        poolout_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_2_0_ce0 = 1'b1;
    end else begin
        weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_2_1_ce0 = 1'b1;
    end else begin
        weights_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_2_2_ce0 = 1'b1;
    end else begin
        weights_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_2_3_ce0 = 1'b1;
    end else begin
        weights_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_2_4_ce0 = 1'b1;
    end else begin
        weights_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_2_5_ce0 = 1'b1;
    end else begin
        weights_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_2_6_ce0 = 1'b1;
    end else begin
        weights_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_2_7_ce0 = 1'b1;
    end else begin
        weights_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_2_8_ce0 = 1'b1;
    end else begin
        weights_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond4_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond3_fu_578_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond2_fu_704_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond1_fu_902_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((exitcond_fu_1016_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_weight_2_address0 = tmp_72_fu_557_p1;

assign exitcond1_fu_902_p2 = ((t_reg_457 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond2_fu_704_p2 = ((j_reg_446 == 4'd13) ? 1'b1 : 1'b0);

assign exitcond3_fu_578_p2 = ((i_reg_435 == 5'd22) ? 1'b1 : 1'b0);

assign exitcond4_fu_545_p2 = ((k_reg_423 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_1016_p2 = ((x_reg_468 == 4'd9) ? 1'b1 : 1'b0);

assign i_10_fu_668_p2 = (i_reg_435 + 5'd1);

assign indvarinc_fu_528_p2 = (invdar_reg_412 + 4'd1);

assign j_8_fu_845_p2 = (j_reg_446 + 4'd1);

assign k_10_fu_551_p2 = (k_reg_423 + 5'd1);

assign output_r_address0 = output_addr_reg_1166;

assign output_r_d0 = reg_523;

assign p_shl1_cast_fu_694_p1 = tmp_98_fu_686_p3;

assign p_shl2_cast_fu_646_p1 = tmp_94_fu_638_p3;

assign p_shl3_cast_fu_658_p1 = tmp_95_fu_650_p3;

assign p_shl5_cast_fu_628_p1 = tmp_92_fu_620_p3;

assign p_shl6_cast_fu_598_p1 = tmp_77_fu_590_p3;

assign p_shl7_cast_fu_610_p1 = tmp_79_fu_602_p3;

assign p_shl_cast_fu_682_p1 = tmp_97_fu_674_p3;

assign t_1_fu_908_p2 = (t_reg_457 + 4'd1);

assign tmp_100_fu_784_p2 = (tmp_72_cast_reg_1099 + tmp_147_cast_fu_776_p3);

assign tmp_101_fu_922_p2 = (tmp_138_cast_reg_1151 + tmp_79_cast_fu_918_p1);

assign tmp_102_fu_932_p2 = (tmp_141_cast_reg_1156 + tmp_79_cast_fu_918_p1);

assign tmp_103_fu_942_p2 = (tmp_144_cast_reg_1161 + tmp_79_cast_fu_918_p1);

assign tmp_104_fu_947_p2 = (tmp_151_cast_reg_1171 + tmp_79_cast_fu_918_p1);

assign tmp_105_fu_952_p2 = (tmp_154_cast_reg_1176 + tmp_79_cast_fu_918_p1);

assign tmp_106_fu_957_p2 = (tmp_157_cast_reg_1181 + tmp_79_cast_fu_918_p1);

assign tmp_107_fu_962_p2 = (tmp_160_cast_reg_1191 + tmp_79_cast_fu_918_p1);

assign tmp_108_fu_967_p2 = (tmp_163_cast_reg_1196 + tmp_79_cast_fu_918_p1);

assign tmp_109_fu_972_p2 = (tmp_166_cast_reg_1201 + tmp_79_cast_fu_918_p1);

assign tmp_110_fu_977_p2 = (tmp_123_cast_reg_1104 + tmp_79_cast8_fu_914_p1);

assign tmp_123_cast_fu_574_p1 = tmp_76_fu_566_p3;

assign tmp_138_cast_fu_725_p3 = {{tmp_42_fu_720_p2}, {3'd0}};

assign tmp_141_cast_fu_742_p3 = {{tmp_44_fu_737_p2}, {3'd0}};

assign tmp_144_cast_fu_759_p3 = {{tmp_46_fu_754_p2}, {3'd0}};

assign tmp_147_cast_fu_776_p3 = {{tmp_48_fu_771_p2}, {4'd0}};

assign tmp_148_cast_fu_789_p1 = tmp_100_fu_784_p2;

assign tmp_151_cast_fu_803_p3 = {{tmp_50_fu_798_p2}, {3'd0}};

assign tmp_154_cast_fu_820_p3 = {{tmp_52_fu_815_p2}, {3'd0}};

assign tmp_157_cast_fu_837_p3 = {{tmp_54_fu_832_p2}, {3'd0}};

assign tmp_160_cast_fu_860_p3 = {{tmp_56_fu_855_p2}, {3'd0}};

assign tmp_163_cast_fu_877_p3 = {{tmp_58_fu_872_p2}, {3'd0}};

assign tmp_166_cast_fu_894_p3 = {{tmp_60_fu_889_p2}, {3'd0}};

assign tmp_167_cast_fu_927_p1 = tmp_101_fu_922_p2;

assign tmp_168_cast_fu_937_p1 = tmp_102_fu_932_p2;

assign tmp_169_cast_fu_988_p1 = tmp_103_reg_1224;

assign tmp_170_cast_fu_992_p1 = tmp_104_reg_1229;

assign tmp_171_cast_fu_996_p1 = tmp_105_reg_1234;

assign tmp_172_cast_fu_1000_p1 = tmp_106_reg_1239;

assign tmp_173_cast_fu_1004_p1 = tmp_107_reg_1244;

assign tmp_174_cast_fu_1008_p1 = tmp_108_reg_1249;

assign tmp_175_cast_fu_1012_p1 = tmp_109_reg_1254;

assign tmp_176_cast_fu_982_p1 = tmp_110_fu_977_p2;

assign tmp_1_8_fu_716_p1 = tmp_74_fu_710_p2;

assign tmp_1_fu_534_p1 = invdar_reg_412;

assign tmp_42_fu_720_p2 = (tmp_1_8_fu_716_p1 + tmp_91_reg_1117);

assign tmp_43_fu_733_p1 = tmp_74_fu_710_p2;

assign tmp_44_fu_737_p2 = (tmp_43_fu_733_p1 + tmp_96_reg_1129);

assign tmp_45_fu_750_p1 = tmp_74_fu_710_p2;

assign tmp_46_fu_754_p2 = (tmp_45_fu_750_p1 + tmp_99_reg_1141);

assign tmp_47_fu_767_p1 = tmp_74_fu_710_p2;

assign tmp_48_fu_771_p2 = (tmp_47_fu_767_p1 + tmp_93_reg_1124);

assign tmp_49_fu_794_p1 = j_reg_446;

assign tmp_50_fu_798_p2 = (tmp_49_fu_794_p1 + tmp_91_reg_1117);

assign tmp_51_fu_811_p1 = j_reg_446;

assign tmp_52_fu_815_p2 = (tmp_51_fu_811_p1 + tmp_96_reg_1129);

assign tmp_53_fu_828_p1 = j_reg_446;

assign tmp_54_fu_832_p2 = (tmp_53_fu_828_p1 + tmp_99_reg_1141);

assign tmp_55_fu_851_p1 = j_8_fu_845_p2;

assign tmp_56_fu_855_p2 = (tmp_55_fu_851_p1 + tmp_91_reg_1117);

assign tmp_57_fu_868_p1 = j_8_fu_845_p2;

assign tmp_58_fu_872_p2 = (tmp_57_fu_868_p1 + tmp_96_reg_1129);

assign tmp_59_fu_885_p1 = j_8_fu_845_p2;

assign tmp_60_fu_889_p2 = (tmp_59_fu_885_p1 + tmp_99_reg_1141);

assign tmp_72_cast_fu_562_p1 = k_reg_423;

assign tmp_72_fu_557_p1 = k_reg_423;

assign tmp_73_fu_584_p2 = ($signed(i_reg_435) + $signed(5'd31));

assign tmp_74_fu_710_p2 = ($signed(j_reg_446) + $signed(4'd15));

assign tmp_76_fu_566_p3 = {{k_reg_423}, {3'd0}};

assign tmp_77_fu_590_p3 = {{tmp_73_fu_584_p2}, {4'd0}};

assign tmp_79_cast8_fu_914_p1 = t_reg_457;

assign tmp_79_cast_fu_918_p1 = t_reg_457;

assign tmp_79_fu_602_p3 = {{tmp_73_fu_584_p2}, {1'd0}};

assign tmp_89_fu_1028_p1 = x_reg_468;

assign tmp_91_fu_614_p2 = (p_shl6_cast_fu_598_p1 - p_shl7_cast_fu_610_p1);

assign tmp_92_fu_620_p3 = {{tmp_73_fu_584_p2}, {2'd0}};

assign tmp_93_fu_632_p2 = (tmp_77_fu_590_p3 - p_shl5_cast_fu_628_p1);

assign tmp_94_fu_638_p3 = {{i_reg_435}, {4'd0}};

assign tmp_95_fu_650_p3 = {{i_reg_435}, {1'd0}};

assign tmp_96_fu_662_p2 = (p_shl2_cast_fu_646_p1 - p_shl3_cast_fu_658_p1);

assign tmp_97_fu_674_p3 = {{i_10_fu_668_p2}, {4'd0}};

assign tmp_98_fu_686_p3 = {{i_10_fu_668_p2}, {1'd0}};

assign tmp_99_fu_698_p2 = (p_shl_cast_fu_682_p1 - p_shl1_cast_fu_694_p1);

assign tmp_s_fu_539_p2 = ((invdar_reg_412 == 4'd8) ? 1'b1 : 1'b0);

assign weights_2_0_address0 = tmp_176_cast_fu_982_p1;

assign weights_2_1_address0 = tmp_176_cast_fu_982_p1;

assign weights_2_2_address0 = tmp_176_cast_reg_1259;

assign weights_2_3_address0 = tmp_176_cast_reg_1259;

assign weights_2_4_address0 = tmp_176_cast_reg_1259;

assign weights_2_5_address0 = tmp_176_cast_reg_1259;

assign weights_2_6_address0 = tmp_176_cast_reg_1259;

assign weights_2_7_address0 = tmp_176_cast_reg_1259;

assign weights_2_8_address0 = tmp_176_cast_reg_1259;

assign x_1_fu_1022_p2 = (x_reg_468 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_72_cast_reg_1099[12:5] <= 8'b00000000;
    tmp_123_cast_reg_1104[2:0] <= 3'b000;
    tmp_123_cast_reg_1104[8] <= 1'b0;
    tmp_91_reg_1117[0] <= 1'b0;
    tmp_93_reg_1124[1:0] <= 2'b00;
    tmp_96_reg_1129[0] <= 1'b0;
    tmp_99_reg_1141[0] <= 1'b0;
    tmp_138_cast_reg_1151[2:0] <= 3'b000;
    tmp_141_cast_reg_1156[2:0] <= 3'b000;
    tmp_144_cast_reg_1161[2:0] <= 3'b000;
    tmp_151_cast_reg_1171[2:0] <= 3'b000;
    tmp_154_cast_reg_1176[2:0] <= 3'b000;
    tmp_157_cast_reg_1181[2:0] <= 3'b000;
    tmp_160_cast_reg_1191[2:0] <= 3'b000;
    tmp_163_cast_reg_1196[2:0] <= 3'b000;
    tmp_166_cast_reg_1201[2:0] <= 3'b000;
    tmp_176_cast_reg_1259[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_3
