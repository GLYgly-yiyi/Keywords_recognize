// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module maxpolling2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        eluout_1_address0,
        eluout_1_ce0,
        eluout_1_q0,
        eluout_1_address1,
        eluout_1_ce1,
        eluout_1_q1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [13:0] eluout_1_address0;
output   eluout_1_ce0;
input  [31:0] eluout_1_q0;
output  [13:0] eluout_1_address1;
output   eluout_1_ce1;
input  [31:0] eluout_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg[13:0] eluout_1_address0;
reg eluout_1_ce0;
reg[13:0] eluout_1_address1;
reg eluout_1_ce1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_generic_fmax_double_s_fu_165_ap_return;
reg   [63:0] reg_195;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [4:0] cnti_2_fu_207_p2;
reg   [4:0] cnti_2_reg_462;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_s_fu_223_p2;
reg   [10:0] tmp_s_reg_467;
wire   [0:0] exitcond2_fu_201_p2;
wire   [10:0] tmp_37_fu_233_p2;
reg   [10:0] tmp_37_reg_473;
wire   [9:0] tmp_40_fu_263_p2;
reg   [9:0] tmp_40_reg_479;
wire   [3:0] cntj_2_fu_275_p2;
reg   [3:0] cntj_2_reg_487;
wire    ap_CS_fsm_state3;
wire   [14:0] tmp_55_cast_fu_304_p1;
reg   [14:0] tmp_55_cast_reg_492;
wire   [0:0] exitcond1_fu_269_p2;
wire   [14:0] tmp_58_cast_fu_321_p1;
reg   [14:0] tmp_58_cast_reg_497;
wire   [14:0] tmp_61_cast_fu_342_p1;
reg   [14:0] tmp_61_cast_reg_502;
wire   [14:0] tmp_64_cast_fu_359_p1;
reg   [14:0] tmp_64_cast_reg_507;
wire   [12:0] tmp_67_cast_fu_372_p3;
reg   [12:0] tmp_67_cast_reg_512;
wire   [5:0] i_3_fu_380_p2;
wire   [3:0] k_3_fu_392_p2;
reg   [3:0] k_3_reg_525;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_386_p2;
wire   [14:0] tmp_48_fu_426_p2;
reg   [14:0] tmp_48_reg_540;
wire   [14:0] tmp_49_fu_431_p2;
reg   [14:0] tmp_49_reg_545;
wire   [12:0] tmp_50_fu_436_p2;
reg   [12:0] tmp_50_reg_550;
wire   [4:0] j_3_fu_441_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] eluout_1_load_reg_570;
reg   [31:0] eluout_1_load_1_reg_575;
wire   [63:0] x_assign_fu_181_p1;
reg   [63:0] x_assign_reg_580;
wire    ap_CS_fsm_state6;
wire   [63:0] y_assign_fu_184_p1;
reg   [63:0] y_assign_reg_585;
wire   [63:0] x_assign_3_fu_187_p1;
reg   [63:0] x_assign_3_reg_590;
wire   [63:0] y_assign_3_fu_191_p1;
reg   [63:0] y_assign_3_reg_595;
wire   [63:0] y_assign_4_generic_fmax_double_s_fu_171_ap_return;
reg   [63:0] y_assign_4_reg_600;
wire    grp_generic_fmax_double_s_fu_165_ap_ready;
reg   [63:0] grp_generic_fmax_double_s_fu_165_x;
reg   [63:0] grp_generic_fmax_double_s_fu_165_y;
wire    y_assign_4_generic_fmax_double_s_fu_171_ap_ready;
reg   [5:0] i_reg_108;
reg   [4:0] cnti_reg_120;
reg   [3:0] cntj_reg_131;
reg   [4:0] j_reg_142;
reg   [3:0] k_reg_154;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_68_cast_fu_411_p1;
wire   [63:0] tmp_69_cast_fu_421_p1;
wire   [63:0] tmp_70_cast_fu_447_p1;
wire   [63:0] tmp_71_cast_fu_451_p1;
wire   [63:0] tmp_72_cast_fu_455_p1;
wire   [31:0] tmp_22_fu_177_p1;
wire   [5:0] tmp_1_fu_213_p2;
wire   [5:0] tmp_s_fu_223_p0;
wire   [5:0] tmp_37_fu_233_p0;
wire   [8:0] tmp_38_fu_239_p3;
wire   [5:0] tmp_39_fu_251_p3;
wire   [9:0] p_shl_cast_fu_247_p1;
wire   [9:0] p_shl1_cast_fu_259_p1;
wire   [4:0] tmp_17_fu_281_p2;
wire   [10:0] tmp_18_cast_fu_287_p1;
wire   [10:0] tmp_41_fu_291_p2;
wire   [13:0] tmp_1_3_fu_296_p3;
wire   [10:0] tmp_42_fu_308_p2;
wire   [13:0] tmp_29_fu_313_p3;
wire   [10:0] tmp_19_cast_fu_325_p1;
wire   [10:0] tmp_43_fu_329_p2;
wire   [13:0] tmp_30_fu_334_p3;
wire   [10:0] tmp_44_fu_346_p2;
wire   [13:0] tmp_31_fu_351_p3;
wire   [9:0] tmp_20_cast_fu_363_p1;
wire   [9:0] tmp_45_fu_367_p2;
wire   [14:0] tmp_21_cast_fu_402_p1;
wire   [14:0] tmp_46_fu_406_p2;
wire   [14:0] tmp_47_fu_416_p2;
wire   [12:0] tmp_21_cast2_fu_398_p1;
reg   [8:0] ap_NS_fsm;
wire   [10:0] tmp_37_fu_233_p00;
wire   [10:0] tmp_s_fu_223_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

generic_fmax_double_s grp_generic_fmax_double_s_fu_165(
    .ap_ready(grp_generic_fmax_double_s_fu_165_ap_ready),
    .x(grp_generic_fmax_double_s_fu_165_x),
    .y(grp_generic_fmax_double_s_fu_165_y),
    .ap_return(grp_generic_fmax_double_s_fu_165_ap_return)
);

generic_fmax_double_s y_assign_4_generic_fmax_double_s_fu_171(
    .ap_ready(y_assign_4_generic_fmax_double_s_fu_171_ap_ready),
    .x(x_assign_3_reg_590),
    .y(y_assign_3_reg_595),
    .ap_return(y_assign_4_generic_fmax_double_s_fu_171_ap_return)
);

keywords_fptrunc_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
keywords_fptrunc_eOg_U68(
    .din0(reg_195),
    .dout(tmp_22_fu_177_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U69(
    .din0(eluout_1_load_reg_570),
    .dout(x_assign_fu_181_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U70(
    .din0(eluout_1_load_1_reg_575),
    .dout(y_assign_fu_184_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U71(
    .din0(eluout_1_q0),
    .dout(x_assign_3_fu_187_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U72(
    .din0(eluout_1_q1),
    .dout(y_assign_3_fu_191_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        cnti_reg_120 <= cnti_2_reg_462;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cnti_reg_120 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cntj_reg_131 <= 4'd0;
    end else if (((exitcond_fu_386_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        cntj_reg_131 <= cntj_2_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_108 <= i_3_fu_380_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_108 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_142 <= 5'd1;
    end else if (((exitcond_fu_386_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_142 <= j_3_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_154 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_reg_154 <= k_3_reg_525;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cnti_2_reg_462 <= cnti_2_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cntj_2_reg_487 <= cntj_2_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_1_load_1_reg_575 <= eluout_1_q1;
        eluout_1_load_reg_570 <= eluout_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_3_reg_525 <= k_3_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_195 <= grp_generic_fmax_double_s_fu_165_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_37_reg_473 <= tmp_37_fu_233_p2;
        tmp_40_reg_479[9 : 1] <= tmp_40_fu_263_p2[9 : 1];
        tmp_s_reg_467 <= tmp_s_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_48_reg_540 <= tmp_48_fu_426_p2;
        tmp_49_reg_545 <= tmp_49_fu_431_p2;
        tmp_50_reg_550 <= tmp_50_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_55_cast_reg_492[13 : 3] <= tmp_55_cast_fu_304_p1[13 : 3];
        tmp_58_cast_reg_497[13 : 3] <= tmp_58_cast_fu_321_p1[13 : 3];
        tmp_61_cast_reg_502[13 : 3] <= tmp_61_cast_fu_342_p1[13 : 3];
        tmp_64_cast_reg_507[13 : 3] <= tmp_64_cast_fu_359_p1[13 : 3];
        tmp_67_cast_reg_512[12 : 3] <= tmp_67_cast_fu_372_p3[12 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_assign_3_reg_590 <= x_assign_3_fu_187_p1;
        x_assign_reg_580 <= x_assign_fu_181_p1;
        y_assign_3_reg_595 <= y_assign_3_fu_191_p1;
        y_assign_reg_585 <= y_assign_fu_184_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_assign_4_reg_600 <= y_assign_4_generic_fmax_double_s_fu_171_ap_return;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_1_address0 = tmp_70_cast_fu_447_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        eluout_1_address0 = tmp_68_cast_fu_411_p1;
    end else begin
        eluout_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_1_address1 = tmp_71_cast_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        eluout_1_address1 = tmp_69_cast_fu_421_p1;
    end else begin
        eluout_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        eluout_1_ce0 = 1'b1;
    end else begin
        eluout_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        eluout_1_ce1 = 1'b1;
    end else begin
        eluout_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_generic_fmax_double_s_fu_165_x = reg_195;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_generic_fmax_double_s_fu_165_x = x_assign_reg_580;
    end else begin
        grp_generic_fmax_double_s_fu_165_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_generic_fmax_double_s_fu_165_y = y_assign_4_reg_600;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_generic_fmax_double_s_fu_165_y = y_assign_reg_585;
    end else begin
        grp_generic_fmax_double_s_fu_165_y = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_386_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cnti_2_fu_207_p2 = (cnti_reg_120 + 5'd1);

assign cntj_2_fu_275_p2 = (cntj_reg_131 + 4'd1);

assign exitcond1_fu_269_p2 = ((cntj_reg_131 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond2_fu_201_p2 = ((cnti_reg_120 == 5'd23) ? 1'b1 : 1'b0);

assign exitcond_fu_386_p2 = ((k_reg_154 == 4'd8) ? 1'b1 : 1'b0);

assign i_3_fu_380_p2 = (i_reg_108 + 6'd2);

assign j_3_fu_441_p2 = (j_reg_142 + 5'd2);

assign k_3_fu_392_p2 = (k_reg_154 + 4'd1);

assign output_r_address0 = tmp_72_cast_fu_455_p1;

assign output_r_d0 = tmp_22_fu_177_p1;

assign p_shl1_cast_fu_259_p1 = tmp_39_fu_251_p3;

assign p_shl_cast_fu_247_p1 = tmp_38_fu_239_p3;

assign tmp_17_fu_281_p2 = ($signed(j_reg_142) + $signed(5'd31));

assign tmp_18_cast_fu_287_p1 = tmp_17_fu_281_p2;

assign tmp_19_cast_fu_325_p1 = j_reg_142;

assign tmp_1_3_fu_296_p3 = {{tmp_41_fu_291_p2}, {3'd0}};

assign tmp_1_fu_213_p2 = ($signed(i_reg_108) + $signed(6'd63));

assign tmp_20_cast_fu_363_p1 = cntj_reg_131;

assign tmp_21_cast2_fu_398_p1 = k_reg_154;

assign tmp_21_cast_fu_402_p1 = k_reg_154;

assign tmp_29_fu_313_p3 = {{tmp_42_fu_308_p2}, {3'd0}};

assign tmp_30_fu_334_p3 = {{tmp_43_fu_329_p2}, {3'd0}};

assign tmp_31_fu_351_p3 = {{tmp_44_fu_346_p2}, {3'd0}};

assign tmp_37_fu_233_p0 = tmp_37_fu_233_p00;

assign tmp_37_fu_233_p00 = i_reg_108;

assign tmp_37_fu_233_p2 = (tmp_37_fu_233_p0 * $signed('h1D));

assign tmp_38_fu_239_p3 = {{cnti_reg_120}, {4'd0}};

assign tmp_39_fu_251_p3 = {{cnti_reg_120}, {1'd0}};

assign tmp_40_fu_263_p2 = (p_shl_cast_fu_247_p1 - p_shl1_cast_fu_259_p1);

assign tmp_41_fu_291_p2 = (tmp_s_reg_467 + tmp_18_cast_fu_287_p1);

assign tmp_42_fu_308_p2 = (tmp_37_reg_473 + tmp_18_cast_fu_287_p1);

assign tmp_43_fu_329_p2 = (tmp_37_reg_473 + tmp_19_cast_fu_325_p1);

assign tmp_44_fu_346_p2 = (tmp_s_reg_467 + tmp_19_cast_fu_325_p1);

assign tmp_45_fu_367_p2 = (tmp_40_reg_479 + tmp_20_cast_fu_363_p1);

assign tmp_46_fu_406_p2 = (tmp_55_cast_reg_492 + tmp_21_cast_fu_402_p1);

assign tmp_47_fu_416_p2 = (tmp_61_cast_reg_502 + tmp_21_cast_fu_402_p1);

assign tmp_48_fu_426_p2 = (tmp_58_cast_reg_497 + tmp_21_cast_fu_402_p1);

assign tmp_49_fu_431_p2 = (tmp_64_cast_reg_507 + tmp_21_cast_fu_402_p1);

assign tmp_50_fu_436_p2 = (tmp_67_cast_reg_512 + tmp_21_cast2_fu_398_p1);

assign tmp_55_cast_fu_304_p1 = tmp_1_3_fu_296_p3;

assign tmp_58_cast_fu_321_p1 = tmp_29_fu_313_p3;

assign tmp_61_cast_fu_342_p1 = tmp_30_fu_334_p3;

assign tmp_64_cast_fu_359_p1 = tmp_31_fu_351_p3;

assign tmp_67_cast_fu_372_p3 = {{tmp_45_fu_367_p2}, {3'd0}};

assign tmp_68_cast_fu_411_p1 = tmp_46_fu_406_p2;

assign tmp_69_cast_fu_421_p1 = tmp_47_fu_416_p2;

assign tmp_70_cast_fu_447_p1 = tmp_48_reg_540;

assign tmp_71_cast_fu_451_p1 = tmp_49_reg_545;

assign tmp_72_cast_fu_455_p1 = tmp_50_reg_550;

assign tmp_s_fu_223_p0 = tmp_s_fu_223_p00;

assign tmp_s_fu_223_p00 = tmp_1_fu_213_p2;

assign tmp_s_fu_223_p2 = (tmp_s_fu_223_p0 * $signed('h1D));

always @ (posedge ap_clk) begin
    tmp_40_reg_479[0] <= 1'b0;
    tmp_55_cast_reg_492[2:0] <= 3'b000;
    tmp_55_cast_reg_492[14] <= 1'b0;
    tmp_58_cast_reg_497[2:0] <= 3'b000;
    tmp_58_cast_reg_497[14] <= 1'b0;
    tmp_61_cast_reg_502[2:0] <= 3'b000;
    tmp_61_cast_reg_502[14] <= 1'b0;
    tmp_64_cast_reg_507[2:0] <= 3'b000;
    tmp_64_cast_reg_507[14] <= 1'b0;
    tmp_67_cast_reg_512[2:0] <= 3'b000;
end

endmodule //maxpolling2
