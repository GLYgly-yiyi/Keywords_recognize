// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_Addr_A,
        input_r_EN_A,
        input_r_WEN_A,
        input_r_Din_A,
        input_r_Dout_A,
        w_0,
        b_0,
        bn_out_address0,
        bn_out_ce0,
        bn_out_we0,
        bn_out_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] input_r_Addr_A;
output   input_r_EN_A;
output  [3:0] input_r_WEN_A;
output  [31:0] input_r_Din_A;
input  [31:0] input_r_Dout_A;
input  [31:0] w_0;
input  [31:0] b_0;
output  [12:0] bn_out_address0;
output   bn_out_ce0;
output   bn_out_we0;
output  [31:0] bn_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_EN_A;
reg bn_out_ce0;
reg bn_out_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] k_13_fu_112_p2;
reg   [6:0] k_13_reg_169;
wire    ap_CS_fsm_state2;
wire   [13:0] tmp_252_cast_fu_126_p1;
reg   [13:0] tmp_252_cast_reg_174;
wire   [0:0] exitcond1_fu_106_p2;
wire   [6:0] i_13_fu_136_p2;
reg   [6:0] i_13_reg_182;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_253_cast_fu_151_p1;
reg   [63:0] tmp_253_cast_reg_187;
wire   [0:0] exitcond_fu_130_p2;
reg   [31:0] input_load_reg_197;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_102_p2;
reg   [31:0] tmp_129_reg_202;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_98_p2;
reg   [31:0] tmp_130_reg_207;
wire    ap_CS_fsm_state11;
reg   [6:0] k_reg_76;
reg   [6:0] i_reg_87;
wire    ap_CS_fsm_state12;
wire   [31:0] input_r_Addr_A_orig;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state5;
wire   [12:0] tmp_1_fu_118_p3;
wire   [13:0] tmp_cast_fu_142_p1;
wire   [13:0] tmp_s_fu_146_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

keywords_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_129_reg_202),
    .din1(b_0),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

keywords_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_load_reg_197),
    .din1(w_0),
    .ce(1'b1),
    .dout(grp_fu_102_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_87 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_87 <= i_13_reg_182;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_76 <= k_13_reg_169;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_76 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_13_reg_182 <= i_13_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_load_reg_197 <= input_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_13_reg_169 <= k_13_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_129_reg_202 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_130_reg_207 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_252_cast_reg_174[12 : 6] <= tmp_252_cast_fu_126_p1[12 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_253_cast_reg_187[13 : 0] <= tmp_253_cast_fu_151_p1[13 : 0];
    end
end

always @ (*) begin
    if ((((exitcond1_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bn_out_ce0 = 1'b1;
    end else begin
        bn_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bn_out_we0 = 1'b1;
    end else begin
        bn_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_EN_A = 1'b1;
    end else begin
        input_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bn_out_address0 = tmp_253_cast_reg_187;

assign bn_out_d0 = tmp_130_reg_207;

assign exitcond1_fu_106_p2 = ((k_reg_76 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_130_p2 = ((i_reg_87 == 7'd64) ? 1'b1 : 1'b0);

assign i_13_fu_136_p2 = (i_reg_87 + 7'd1);

assign input_r_Addr_A = input_r_Addr_A_orig << 32'd2;

assign input_r_Addr_A_orig = tmp_253_cast_fu_151_p1;

assign input_r_Din_A = 32'd0;

assign input_r_WEN_A = 4'd0;

assign k_13_fu_112_p2 = (k_reg_76 + 7'd1);

assign tmp_1_fu_118_p3 = {{k_reg_76}, {6'd0}};

assign tmp_252_cast_fu_126_p1 = tmp_1_fu_118_p3;

assign tmp_253_cast_fu_151_p1 = tmp_s_fu_146_p2;

assign tmp_cast_fu_142_p1 = i_reg_87;

assign tmp_s_fu_146_p2 = (tmp_252_cast_reg_174 + tmp_cast_fu_142_p1);

always @ (posedge ap_clk) begin
    tmp_252_cast_reg_174[5:0] <= 6'b000000;
    tmp_252_cast_reg_174[13] <= 1'b0;
    tmp_253_cast_reg_187[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //bn
