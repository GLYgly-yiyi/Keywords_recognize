// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module elu1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        cnn_0_out_address0,
        cnn_0_out_ce0,
        cnn_0_out_q0
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [14:0] cnn_0_out_address0;
output   cnn_0_out_ce0;
input  [31:0] cnn_0_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg cnn_0_out_ce0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] k_7_fu_153_p2;
reg   [6:0] k_7_reg_289;
wire    ap_CS_fsm_state2;
wire   [13:0] tmp_68_fu_183_p2;
reg   [13:0] tmp_68_reg_294;
wire   [0:0] exitcond2_fu_147_p2;
wire   [5:0] i_8_fu_195_p2;
reg   [5:0] i_8_reg_302;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_116_cast_fu_210_p3;
reg   [15:0] tmp_116_cast_reg_307;
wire   [0:0] exitcond1_fu_189_p2;
wire   [2:0] j_7_fu_224_p2;
reg   [2:0] j_7_reg_315;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_218_p2;
reg   [14:0] output_addr_reg_325;
reg   [31:0] cnn_0_out_load_reg_330;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_42_fu_129_p1;
reg   [63:0] tmp_42_reg_341;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_26_fu_280_p2;
wire   [63:0] grp_fu_142_p2;
reg   [63:0] tmp_43_reg_346;
wire    ap_CS_fsm_state21;
wire   [63:0] grp_fu_137_p2;
reg   [63:0] tmp_44_reg_351;
wire    ap_CS_fsm_state26;
wire   [31:0] tmp_45_fu_126_p1;
wire    ap_CS_fsm_state27;
reg   [6:0] k_reg_83;
reg   [5:0] i_reg_94;
reg   [2:0] j_reg_105;
wire    ap_CS_fsm_state28;
reg   [31:0] storemerge_reg_116;
wire   [63:0] tmp_117_cast_fu_239_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state7;
wire   [12:0] tmp_1_fu_159_p3;
wire   [7:0] tmp_s_fu_171_p3;
wire   [13:0] p_shl_cast_fu_167_p1;
wire   [13:0] p_shl1_cast_fu_179_p1;
wire   [13:0] tmp_cast_fu_201_p1;
wire   [13:0] tmp_69_fu_205_p2;
wire   [15:0] tmp_41_cast_fu_230_p1;
wire   [15:0] tmp_70_fu_234_p2;
wire   [31:0] cnn_0_out_load_to_in_fu_245_p1;
wire   [7:0] tmp_22_fu_248_p4;
wire   [22:0] tmp_1_7_fu_258_p1;
wire   [0:0] notrhs_fu_268_p2;
wire   [0:0] notlhs_fu_262_p2;
wire   [0:0] tmp_24_fu_274_p2;
wire   [0:0] tmp_25_fu_132_p2;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

keywords_fptrunc_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
keywords_fptrunc_eOg_U25(
    .din0(tmp_44_reg_351),
    .dout(tmp_45_fu_126_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U26(
    .din0(cnn_0_out_load_reg_330),
    .dout(tmp_42_fu_129_p1)
);

keywords_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
keywords_fcmp_32ng8j_U27(
    .din0(cnn_0_out_load_reg_330),
    .din1(32'd0),
    .opcode(5'd3),
    .dout(tmp_25_fu_132_p2)
);

keywords_dadd_64nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
keywords_dadd_64nhbi_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_43_reg_346),
    .din1(64'd13830554455654793216),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

keywords_dexp_64nibs #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
keywords_dexp_64nibs_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(tmp_42_reg_341),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_94 <= i_8_reg_302;
    end else if (((exitcond2_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_94 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_105 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        j_reg_105 <= j_7_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_83 <= k_7_reg_289;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_83 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_26_fu_280_p2 == 1'd1))) begin
        storemerge_reg_116 <= cnn_0_out_load_reg_330;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        storemerge_reg_116 <= tmp_45_fu_126_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cnn_0_out_load_reg_330 <= cnn_0_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_8_reg_302 <= i_8_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_7_reg_315 <= j_7_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_7_reg_289 <= k_7_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        output_addr_reg_325 <= tmp_117_cast_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_116_cast_reg_307[15 : 2] <= tmp_116_cast_fu_210_p3[15 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_42_reg_341 <= tmp_42_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_43_reg_346 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_44_reg_351 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_68_reg_294[13 : 1] <= tmp_68_fu_183_p2[13 : 1];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cnn_0_out_ce0 = 1'b1;
    end else begin
        cnn_0_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_26_fu_280_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign cnn_0_out_address0 = tmp_117_cast_fu_239_p1;

assign cnn_0_out_load_to_in_fu_245_p1 = cnn_0_out_load_reg_330;

assign exitcond1_fu_189_p2 = ((i_reg_94 == 6'd62) ? 1'b1 : 1'b0);

assign exitcond2_fu_147_p2 = ((k_reg_83 == 7'd98) ? 1'b1 : 1'b0);

assign exitcond_fu_218_p2 = ((j_reg_105 == 3'd4) ? 1'b1 : 1'b0);

assign i_8_fu_195_p2 = (i_reg_94 + 6'd1);

assign j_7_fu_224_p2 = (j_reg_105 + 3'd1);

assign k_7_fu_153_p2 = (k_reg_83 + 7'd1);

assign notlhs_fu_262_p2 = ((tmp_22_fu_248_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_268_p2 = ((tmp_1_7_fu_258_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_325;

assign output_r_d0 = storemerge_reg_116;

assign p_shl1_cast_fu_179_p1 = tmp_s_fu_171_p3;

assign p_shl_cast_fu_167_p1 = tmp_1_fu_159_p3;

assign tmp_116_cast_fu_210_p3 = {{tmp_69_fu_205_p2}, {2'd0}};

assign tmp_117_cast_fu_239_p1 = tmp_70_fu_234_p2;

assign tmp_1_7_fu_258_p1 = cnn_0_out_load_to_in_fu_245_p1[22:0];

assign tmp_1_fu_159_p3 = {{k_reg_83}, {6'd0}};

assign tmp_22_fu_248_p4 = {{cnn_0_out_load_to_in_fu_245_p1[30:23]}};

assign tmp_24_fu_274_p2 = (notrhs_fu_268_p2 | notlhs_fu_262_p2);

assign tmp_26_fu_280_p2 = (tmp_25_fu_132_p2 & tmp_24_fu_274_p2);

assign tmp_41_cast_fu_230_p1 = j_reg_105;

assign tmp_68_fu_183_p2 = (p_shl_cast_fu_167_p1 - p_shl1_cast_fu_179_p1);

assign tmp_69_fu_205_p2 = (tmp_cast_fu_201_p1 + tmp_68_reg_294);

assign tmp_70_fu_234_p2 = (tmp_116_cast_reg_307 + tmp_41_cast_fu_230_p1);

assign tmp_cast_fu_201_p1 = i_reg_94;

assign tmp_s_fu_171_p3 = {{k_reg_83}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_68_reg_294[0] <= 1'b0;
    tmp_116_cast_reg_307[1:0] <= 2'b00;
end

endmodule //elu1
