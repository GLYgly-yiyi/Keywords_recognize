// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module maxpolling3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flatten_output_address0,
        flatten_output_ce0,
        flatten_output_we0,
        flatten_output_d0,
        eluout_2_address0,
        eluout_2_ce0,
        eluout_2_q0,
        eluout_2_address1,
        eluout_2_ce1,
        eluout_2_q1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] flatten_output_address0;
output   flatten_output_ce0;
output   flatten_output_we0;
output  [31:0] flatten_output_d0;
output  [11:0] eluout_2_address0;
output   eluout_2_ce0;
input  [31:0] eluout_2_q0;
output  [11:0] eluout_2_address1;
output   eluout_2_ce1;
input  [31:0] eluout_2_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flatten_output_ce0;
reg flatten_output_we0;
reg[11:0] eluout_2_address0;
reg eluout_2_ce0;
reg[11:0] eluout_2_address1;
reg eluout_2_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] poolout_2_address0;
reg    poolout_2_ce0;
reg    poolout_2_we0;
wire   [31:0] poolout_2_q0;
wire   [63:0] grp_generic_fmax_double_s_fu_278_ap_return;
reg   [63:0] reg_308;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [3:0] cnti_1_fu_320_p2;
reg   [3:0] cnti_1_reg_747;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_3_fu_356_p2;
reg   [9:0] tmp_3_reg_752;
wire   [0:0] exitcond5_fu_314_p2;
wire   [9:0] tmp_5_fu_386_p2;
reg   [9:0] tmp_5_reg_758;
wire   [6:0] tmp_11_fu_412_p2;
reg   [6:0] tmp_11_reg_764;
wire   [2:0] cntj_1_fu_424_p2;
reg   [2:0] cntj_1_reg_772;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_26_cast_fu_449_p3;
reg   [12:0] tmp_26_cast_reg_777;
wire   [0:0] exitcond4_fu_418_p2;
wire   [12:0] tmp_29_cast_fu_470_p3;
reg   [12:0] tmp_29_cast_reg_782;
wire   [12:0] tmp_32_cast_fu_491_p3;
reg   [12:0] tmp_32_cast_reg_787;
wire   [12:0] tmp_35_cast_fu_512_p3;
reg   [12:0] tmp_35_cast_reg_792;
wire   [10:0] tmp_38_cast_fu_529_p3;
reg   [10:0] tmp_38_cast_reg_797;
wire   [4:0] i_1_fu_537_p2;
wire   [4:0] k_1_fu_549_p2;
reg   [4:0] k_1_reg_810;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_543_p2;
wire   [12:0] tmp_33_fu_583_p2;
reg   [12:0] tmp_33_reg_825;
wire   [12:0] tmp_34_fu_588_p2;
reg   [12:0] tmp_34_reg_830;
wire   [10:0] tmp_35_fu_593_p2;
reg   [10:0] tmp_35_reg_835;
wire   [3:0] j_1_fu_598_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] eluout_2_load_reg_855;
reg   [31:0] eluout_2_load_1_reg_860;
wire   [63:0] x_assign_fu_294_p1;
reg   [63:0] x_assign_reg_865;
wire    ap_CS_fsm_state6;
wire   [63:0] y_assign_fu_297_p1;
reg   [63:0] y_assign_reg_870;
wire   [63:0] x_assign_1_fu_300_p1;
reg   [63:0] x_assign_1_reg_875;
wire   [63:0] y_assign_1_fu_304_p1;
reg   [63:0] y_assign_1_reg_880;
wire   [63:0] y_assign_2_generic_fmax_double_s_fu_284_ap_return;
reg   [63:0] y_assign_2_reg_885;
wire   [3:0] i_2_fu_622_p2;
reg   [3:0] i_2_reg_893;
wire    ap_CS_fsm_state10;
wire   [9:0] tmp_4_fu_628_p2;
wire   [0:0] exitcond2_fu_616_p2;
wire   [9:0] cnt_3_fu_634_p2;
reg   [9:0] cnt_3_reg_903;
wire   [6:0] tmp_17_fu_660_p2;
reg   [6:0] tmp_17_reg_908;
wire   [2:0] j_2_fu_672_p2;
reg   [2:0] j_2_reg_916;
wire    ap_CS_fsm_state11;
wire   [9:0] tmp_8_fu_678_p2;
reg   [9:0] tmp_8_reg_921;
wire   [0:0] exitcond1_fu_666_p2;
wire   [10:0] tmp_41_cast_fu_693_p3;
reg   [10:0] tmp_41_cast_reg_926;
wire   [4:0] k_2_fu_707_p2;
reg   [4:0] k_2_reg_934;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_701_p2;
wire   [9:0] indvars_iv_next_fu_727_p2;
wire   [9:0] tmp_15_fu_738_p2;
wire    ap_CS_fsm_state13;
wire    grp_generic_fmax_double_s_fu_278_ap_ready;
reg   [63:0] grp_generic_fmax_double_s_fu_278_x;
reg   [63:0] grp_generic_fmax_double_s_fu_278_y;
wire    y_assign_2_generic_fmax_double_s_fu_284_ap_ready;
reg   [4:0] i_reg_144;
reg   [3:0] cnti_reg_156;
reg   [3:0] j_reg_167;
reg   [2:0] cntj_reg_179;
reg   [4:0] k_reg_190;
wire    ap_CS_fsm_state9;
reg   [9:0] cnt_reg_201;
reg   [3:0] i1_reg_213;
reg   [9:0] indvars_iv_reg_224;
reg   [9:0] cnt_1_reg_234;
reg   [2:0] j2_reg_245;
reg   [9:0] cnt_2_reg_256;
reg   [4:0] k3_reg_267;
wire   [63:0] tmp_42_cast_fu_568_p1;
wire   [63:0] tmp_43_cast_fu_578_p1;
wire   [63:0] tmp_44_cast_fu_604_p1;
wire   [63:0] tmp_45_cast_fu_608_p1;
wire   [63:0] tmp_46_cast_fu_612_p1;
wire   [63:0] tmp_47_cast_fu_722_p1;
wire   [63:0] tmp_14_fu_733_p1;
wire   [31:0] tmp_12_fu_290_p1;
wire   [4:0] tmp_1_1_fu_326_p2;
wire   [8:0] tmp_1_fu_332_p3;
wire   [6:0] tmp_2_fu_344_p3;
wire   [9:0] p_shl4_cast_fu_340_p1;
wire   [9:0] p_shl5_cast_fu_352_p1;
wire   [8:0] tmp_6_fu_362_p3;
wire   [6:0] tmp_s_fu_374_p3;
wire   [9:0] p_shl2_cast_fu_370_p1;
wire   [9:0] p_shl3_cast_fu_382_p1;
wire   [4:0] tmp_10_fu_400_p3;
wire   [6:0] tmp_7_fu_392_p3;
wire   [6:0] p_shl1_cast_fu_408_p1;
wire   [3:0] tmp_9_fu_430_p2;
wire   [8:0] tmp_18_fu_440_p1;
wire   [8:0] tmp_1_2_fu_436_p1;
wire   [8:0] tmp_19_fu_443_p2;
wire   [8:0] tmp_21_fu_461_p1;
wire   [8:0] tmp_20_fu_457_p1;
wire   [8:0] tmp_22_fu_464_p2;
wire   [8:0] tmp_24_fu_482_p1;
wire   [8:0] tmp_23_fu_478_p1;
wire   [8:0] tmp_25_fu_485_p2;
wire   [8:0] tmp_27_fu_503_p1;
wire   [8:0] tmp_26_fu_499_p1;
wire   [8:0] tmp_28_fu_506_p2;
wire   [6:0] tmp_7_cast_fu_520_p1;
wire   [6:0] tmp_29_fu_524_p2;
wire   [12:0] tmp_11_cast_fu_559_p1;
wire   [12:0] tmp_31_fu_563_p2;
wire   [12:0] tmp_32_fu_573_p2;
wire   [10:0] tmp_11_cast8_fu_555_p1;
wire   [4:0] tmp_16_fu_648_p3;
wire   [6:0] tmp_13_fu_640_p3;
wire   [6:0] p_shl7_cast_fu_656_p1;
wire   [6:0] tmp_10_cast_fu_684_p1;
wire   [6:0] tmp_30_fu_688_p2;
wire   [10:0] tmp_13_cast_fu_713_p1;
wire   [10:0] tmp_36_fu_717_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

maxpolling3_poolojbC #(
    .DataWidth( 32 ),
    .AddressRange( 960 ),
    .AddressWidth( 10 ))
poolout_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(poolout_2_address0),
    .ce0(poolout_2_ce0),
    .we0(poolout_2_we0),
    .d0(tmp_12_fu_290_p1),
    .q0(poolout_2_q0)
);

generic_fmax_double_s grp_generic_fmax_double_s_fu_278(
    .ap_ready(grp_generic_fmax_double_s_fu_278_ap_ready),
    .x(grp_generic_fmax_double_s_fu_278_x),
    .y(grp_generic_fmax_double_s_fu_278_y),
    .ap_return(grp_generic_fmax_double_s_fu_278_ap_return)
);

generic_fmax_double_s y_assign_2_generic_fmax_double_s_fu_284(
    .ap_ready(y_assign_2_generic_fmax_double_s_fu_284_ap_ready),
    .x(x_assign_1_reg_875),
    .y(y_assign_1_reg_880),
    .ap_return(y_assign_2_generic_fmax_double_s_fu_284_ap_return)
);

keywords_fptrunc_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
keywords_fptrunc_eOg_U97(
    .din0(reg_308),
    .dout(tmp_12_fu_290_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U98(
    .din0(eluout_2_load_reg_855),
    .dout(x_assign_fu_294_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U99(
    .din0(eluout_2_load_1_reg_860),
    .dout(y_assign_fu_297_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U100(
    .din0(eluout_2_q0),
    .dout(x_assign_1_fu_300_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U101(
    .din0(eluout_2_q1),
    .dout(y_assign_1_fu_304_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        cnt_1_reg_234 <= cnt_reg_201;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_701_p2 == 1'd1))) begin
        cnt_1_reg_234 <= tmp_8_reg_921;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        cnt_2_reg_256 <= tmp_15_fu_738_p2;
    end else if (((exitcond1_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        cnt_2_reg_256 <= cnt_1_reg_234;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cnt_reg_201 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_666_p2 == 1'd1))) begin
        cnt_reg_201 <= cnt_3_reg_903;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        cnti_reg_156 <= cnti_1_reg_747;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cnti_reg_156 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cntj_reg_179 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_543_p2 == 1'd1))) begin
        cntj_reg_179 <= cntj_1_reg_772;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_213 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_666_p2 == 1'd1))) begin
        i1_reg_213 <= i_2_reg_893;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_144 <= i_1_fu_537_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_144 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        indvars_iv_reg_224 <= tmp_4_fu_628_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_701_p2 == 1'd1))) begin
        indvars_iv_reg_224 <= indvars_iv_next_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        j2_reg_245 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_701_p2 == 1'd1))) begin
        j2_reg_245 <= j_2_reg_916;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_167 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_543_p2 == 1'd1))) begin
        j_reg_167 <= j_1_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k3_reg_267 <= k_2_reg_934;
    end else if (((exitcond1_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        k3_reg_267 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_190 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_reg_190 <= k_1_reg_810;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        cnt_3_reg_903 <= cnt_3_fu_634_p2;
        tmp_17_reg_908[6 : 1] <= tmp_17_fu_660_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cnti_1_reg_747 <= cnti_1_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cntj_1_reg_772 <= cntj_1_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_2_load_1_reg_860 <= eluout_2_q1;
        eluout_2_load_reg_855 <= eluout_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_893 <= i_2_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_2_reg_916 <= j_2_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_1_reg_810 <= k_1_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_2_reg_934 <= k_2_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_308 <= grp_generic_fmax_double_s_fu_278_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_11_reg_764[6 : 1] <= tmp_11_fu_412_p2[6 : 1];
        tmp_3_reg_752[9 : 2] <= tmp_3_fu_356_p2[9 : 2];
        tmp_5_reg_758[9 : 2] <= tmp_5_fu_386_p2[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_26_cast_reg_777[12 : 4] <= tmp_26_cast_fu_449_p3[12 : 4];
        tmp_29_cast_reg_782[12 : 4] <= tmp_29_cast_fu_470_p3[12 : 4];
        tmp_32_cast_reg_787[12 : 4] <= tmp_32_cast_fu_491_p3[12 : 4];
        tmp_35_cast_reg_792[12 : 4] <= tmp_35_cast_fu_512_p3[12 : 4];
        tmp_38_cast_reg_797[10 : 4] <= tmp_38_cast_fu_529_p3[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_33_reg_825 <= tmp_33_fu_583_p2;
        tmp_34_reg_830 <= tmp_34_fu_588_p2;
        tmp_35_reg_835 <= tmp_35_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_41_cast_reg_926[10 : 4] <= tmp_41_cast_fu_693_p3[10 : 4];
        tmp_8_reg_921 <= tmp_8_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_assign_1_reg_875 <= x_assign_1_fu_300_p1;
        x_assign_reg_865 <= x_assign_fu_294_p1;
        y_assign_1_reg_880 <= y_assign_1_fu_304_p1;
        y_assign_reg_870 <= y_assign_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_assign_2_reg_885 <= y_assign_2_generic_fmax_double_s_fu_284_ap_return;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_616_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_616_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_2_address0 = tmp_44_cast_fu_604_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        eluout_2_address0 = tmp_42_cast_fu_568_p1;
    end else begin
        eluout_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_2_address1 = tmp_45_cast_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        eluout_2_address1 = tmp_43_cast_fu_578_p1;
    end else begin
        eluout_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        eluout_2_ce0 = 1'b1;
    end else begin
        eluout_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        eluout_2_ce1 = 1'b1;
    end else begin
        eluout_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        flatten_output_ce0 = 1'b1;
    end else begin
        flatten_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        flatten_output_we0 = 1'b1;
    end else begin
        flatten_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_generic_fmax_double_s_fu_278_x = reg_308;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_generic_fmax_double_s_fu_278_x = x_assign_reg_865;
    end else begin
        grp_generic_fmax_double_s_fu_278_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_generic_fmax_double_s_fu_278_y = y_assign_2_reg_885;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_generic_fmax_double_s_fu_278_y = y_assign_reg_870;
    end else begin
        grp_generic_fmax_double_s_fu_278_y = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        poolout_2_address0 = tmp_47_cast_fu_722_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_2_address0 = tmp_46_cast_fu_612_p1;
    end else begin
        poolout_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12))) begin
        poolout_2_ce0 = 1'b1;
    end else begin
        poolout_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_2_we0 = 1'b1;
    end else begin
        poolout_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond4_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_543_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_616_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_666_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_701_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cnt_3_fu_634_p2 = (cnt_reg_201 + 10'd96);

assign cnti_1_fu_320_p2 = (cnti_reg_156 + 4'd1);

assign cntj_1_fu_424_p2 = (cntj_reg_179 + 3'd1);

assign exitcond1_fu_666_p2 = ((j2_reg_245 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_fu_616_p2 = ((i1_reg_213 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_543_p2 = ((k_reg_190 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond4_fu_418_p2 = ((cntj_reg_179 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond5_fu_314_p2 = ((cnti_reg_156 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_701_p2 = ((cnt_2_reg_256 == indvars_iv_reg_224) ? 1'b1 : 1'b0);

assign flatten_output_address0 = tmp_14_fu_733_p1;

assign flatten_output_d0 = poolout_2_q0;

assign i_1_fu_537_p2 = (i_reg_144 + 5'd2);

assign i_2_fu_622_p2 = (i1_reg_213 + 4'd1);

assign indvars_iv_next_fu_727_p2 = (indvars_iv_reg_224 + 10'd16);

assign j_1_fu_598_p2 = (j_reg_167 + 4'd2);

assign j_2_fu_672_p2 = (j2_reg_245 + 3'd1);

assign k_1_fu_549_p2 = (k_reg_190 + 5'd1);

assign k_2_fu_707_p2 = (k3_reg_267 + 5'd1);

assign p_shl1_cast_fu_408_p1 = tmp_10_fu_400_p3;

assign p_shl2_cast_fu_370_p1 = tmp_6_fu_362_p3;

assign p_shl3_cast_fu_382_p1 = tmp_s_fu_374_p3;

assign p_shl4_cast_fu_340_p1 = tmp_1_fu_332_p3;

assign p_shl5_cast_fu_352_p1 = tmp_2_fu_344_p3;

assign p_shl7_cast_fu_656_p1 = tmp_16_fu_648_p3;

assign tmp_10_cast_fu_684_p1 = j2_reg_245;

assign tmp_10_fu_400_p3 = {{cnti_reg_156}, {1'd0}};

assign tmp_11_cast8_fu_555_p1 = k_reg_190;

assign tmp_11_cast_fu_559_p1 = k_reg_190;

assign tmp_11_fu_412_p2 = (tmp_7_fu_392_p3 - p_shl1_cast_fu_408_p1);

assign tmp_13_cast_fu_713_p1 = k3_reg_267;

assign tmp_13_fu_640_p3 = {{i1_reg_213}, {3'd0}};

assign tmp_14_fu_733_p1 = cnt_2_reg_256;

assign tmp_15_fu_738_p2 = (cnt_2_reg_256 + 10'd1);

assign tmp_16_fu_648_p3 = {{i1_reg_213}, {1'd0}};

assign tmp_17_fu_660_p2 = (tmp_13_fu_640_p3 - p_shl7_cast_fu_656_p1);

assign tmp_18_fu_440_p1 = tmp_3_reg_752[8:0];

assign tmp_19_fu_443_p2 = (tmp_18_fu_440_p1 + tmp_1_2_fu_436_p1);

assign tmp_1_1_fu_326_p2 = ($signed(i_reg_144) + $signed(5'd31));

assign tmp_1_2_fu_436_p1 = tmp_9_fu_430_p2;

assign tmp_1_fu_332_p3 = {{tmp_1_1_fu_326_p2}, {4'd0}};

assign tmp_20_fu_457_p1 = tmp_9_fu_430_p2;

assign tmp_21_fu_461_p1 = tmp_5_reg_758[8:0];

assign tmp_22_fu_464_p2 = (tmp_21_fu_461_p1 + tmp_20_fu_457_p1);

assign tmp_23_fu_478_p1 = j_reg_167;

assign tmp_24_fu_482_p1 = tmp_5_reg_758[8:0];

assign tmp_25_fu_485_p2 = (tmp_24_fu_482_p1 + tmp_23_fu_478_p1);

assign tmp_26_cast_fu_449_p3 = {{tmp_19_fu_443_p2}, {4'd0}};

assign tmp_26_fu_499_p1 = j_reg_167;

assign tmp_27_fu_503_p1 = tmp_3_reg_752[8:0];

assign tmp_28_fu_506_p2 = (tmp_27_fu_503_p1 + tmp_26_fu_499_p1);

assign tmp_29_cast_fu_470_p3 = {{tmp_22_fu_464_p2}, {4'd0}};

assign tmp_29_fu_524_p2 = (tmp_11_reg_764 + tmp_7_cast_fu_520_p1);

assign tmp_2_fu_344_p3 = {{tmp_1_1_fu_326_p2}, {2'd0}};

assign tmp_30_fu_688_p2 = (tmp_10_cast_fu_684_p1 + tmp_17_reg_908);

assign tmp_31_fu_563_p2 = (tmp_26_cast_reg_777 + tmp_11_cast_fu_559_p1);

assign tmp_32_cast_fu_491_p3 = {{tmp_25_fu_485_p2}, {4'd0}};

assign tmp_32_fu_573_p2 = (tmp_32_cast_reg_787 + tmp_11_cast_fu_559_p1);

assign tmp_33_fu_583_p2 = (tmp_29_cast_reg_782 + tmp_11_cast_fu_559_p1);

assign tmp_34_fu_588_p2 = (tmp_35_cast_reg_792 + tmp_11_cast_fu_559_p1);

assign tmp_35_cast_fu_512_p3 = {{tmp_28_fu_506_p2}, {4'd0}};

assign tmp_35_fu_593_p2 = (tmp_38_cast_reg_797 + tmp_11_cast8_fu_555_p1);

assign tmp_36_fu_717_p2 = (tmp_41_cast_reg_926 + tmp_13_cast_fu_713_p1);

assign tmp_38_cast_fu_529_p3 = {{tmp_29_fu_524_p2}, {4'd0}};

assign tmp_3_fu_356_p2 = (p_shl4_cast_fu_340_p1 - p_shl5_cast_fu_352_p1);

assign tmp_41_cast_fu_693_p3 = {{tmp_30_fu_688_p2}, {4'd0}};

assign tmp_42_cast_fu_568_p1 = tmp_31_fu_563_p2;

assign tmp_43_cast_fu_578_p1 = tmp_32_fu_573_p2;

assign tmp_44_cast_fu_604_p1 = tmp_33_reg_825;

assign tmp_45_cast_fu_608_p1 = tmp_34_reg_830;

assign tmp_46_cast_fu_612_p1 = tmp_35_reg_835;

assign tmp_47_cast_fu_722_p1 = tmp_36_fu_717_p2;

assign tmp_4_fu_628_p2 = (cnt_reg_201 | 10'd16);

assign tmp_5_fu_386_p2 = (p_shl2_cast_fu_370_p1 - p_shl3_cast_fu_382_p1);

assign tmp_6_fu_362_p3 = {{i_reg_144}, {4'd0}};

assign tmp_7_cast_fu_520_p1 = cntj_reg_179;

assign tmp_7_fu_392_p3 = {{cnti_reg_156}, {3'd0}};

assign tmp_8_fu_678_p2 = (cnt_1_reg_234 + 10'd16);

assign tmp_9_fu_430_p2 = ($signed(4'd15) + $signed(j_reg_167));

assign tmp_s_fu_374_p3 = {{i_reg_144}, {2'd0}};

always @ (posedge ap_clk) begin
    tmp_3_reg_752[1:0] <= 2'b00;
    tmp_5_reg_758[1:0] <= 2'b00;
    tmp_11_reg_764[0] <= 1'b0;
    tmp_26_cast_reg_777[3:0] <= 4'b0000;
    tmp_29_cast_reg_782[3:0] <= 4'b0000;
    tmp_32_cast_reg_787[3:0] <= 4'b0000;
    tmp_35_cast_reg_792[3:0] <= 4'b0000;
    tmp_38_cast_reg_797[3:0] <= 4'b0000;
    tmp_17_reg_908[0] <= 1'b0;
    tmp_41_cast_reg_926[3:0] <= 4'b0000;
end

endmodule //maxpolling3
