// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module elu2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        cnn_1_out_address0,
        cnn_1_out_ce0,
        cnn_1_out_q0
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [13:0] cnn_1_out_address0;
output   cnn_1_out_ce0;
input  [31:0] cnn_1_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg cnn_1_out_ce0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] next_mul_fu_157_p2;
reg   [10:0] next_mul_reg_277;
wire    ap_CS_fsm_state2;
wire   [5:0] k_6_fu_169_p2;
reg   [5:0] k_6_reg_285;
wire   [4:0] i_7_fu_181_p2;
reg   [4:0] i_7_reg_293;
wire    ap_CS_fsm_state3;
wire   [14:0] tmp_110_cast_fu_205_p1;
reg   [14:0] tmp_110_cast_reg_298;
wire   [0:0] exitcond1_fu_175_p2;
wire   [3:0] j_6_fu_215_p2;
reg   [3:0] j_6_reg_306;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_209_p2;
reg   [13:0] output_addr_reg_316;
reg   [31:0] cnn_1_out_load_reg_321;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_37_fu_139_p1;
reg   [63:0] tmp_37_reg_332;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_21_fu_271_p2;
wire   [63:0] grp_fu_152_p2;
reg   [63:0] tmp_38_reg_337;
wire    ap_CS_fsm_state21;
wire   [63:0] grp_fu_147_p2;
reg   [63:0] tmp_39_reg_342;
wire    ap_CS_fsm_state26;
wire   [31:0] tmp_40_fu_136_p1;
wire    ap_CS_fsm_state27;
reg   [5:0] k_reg_81;
reg   [10:0] phi_mul_reg_92;
reg   [4:0] i_reg_104;
wire   [0:0] exitcond2_fu_163_p2;
reg   [3:0] j_reg_115;
wire    ap_CS_fsm_state28;
reg   [31:0] storemerge_reg_126;
wire   [63:0] tmp_111_cast_fu_230_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state7;
wire   [10:0] tmp_cast_fu_187_p1;
wire   [10:0] tmp_s_fu_191_p2;
wire   [13:0] tmp_1_fu_197_p3;
wire   [14:0] tmp_36_cast_fu_221_p1;
wire   [14:0] tmp_67_fu_225_p2;
wire   [31:0] cnn_1_out_load_to_in_fu_236_p1;
wire   [7:0] tmp_17_fu_239_p4;
wire   [22:0] tmp_41_fu_249_p1;
wire   [0:0] notrhs_fu_259_p2;
wire   [0:0] notlhs_fu_253_p2;
wire   [0:0] tmp_19_fu_265_p2;
wire   [0:0] tmp_20_fu_142_p2;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

keywords_fptrunc_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
keywords_fptrunc_eOg_U61(
    .din0(tmp_39_reg_342),
    .dout(tmp_40_fu_136_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U62(
    .din0(cnn_1_out_load_reg_321),
    .dout(tmp_37_fu_139_p1)
);

keywords_fcmp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
keywords_fcmp_32ng8j_U63(
    .din0(cnn_1_out_load_reg_321),
    .din1(32'd0),
    .opcode(5'd3),
    .dout(tmp_20_fu_142_p2)
);

keywords_dadd_64nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
keywords_dadd_64nhbi_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_38_reg_337),
    .din1(64'd13830554455654793216),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

keywords_dexp_64nibs #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
keywords_dexp_64nibs_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(tmp_37_reg_332),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_104 <= 5'd0;
    end else if (((exitcond_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_104 <= i_7_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_115 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        j_reg_115 <= j_6_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_81 <= k_6_reg_285;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_81 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_92 <= next_mul_reg_277;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_92 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_fu_271_p2 == 1'd1))) begin
        storemerge_reg_126 <= cnn_1_out_load_reg_321;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        storemerge_reg_126 <= tmp_40_fu_136_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cnn_1_out_load_reg_321 <= cnn_1_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_7_reg_293 <= i_7_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_6_reg_306 <= j_6_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_6_reg_285 <= k_6_fu_169_p2;
        next_mul_reg_277 <= next_mul_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        output_addr_reg_316 <= tmp_111_cast_fu_230_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_110_cast_reg_298[13 : 3] <= tmp_110_cast_fu_205_p1[13 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_21_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_37_reg_332 <= tmp_37_fu_139_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_38_reg_337 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_39_reg_342 <= grp_fu_147_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_163_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_163_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cnn_1_out_ce0 = 1'b1;
    end else begin
        cnn_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_163_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign cnn_1_out_address0 = tmp_111_cast_fu_230_p1;

assign cnn_1_out_load_to_in_fu_236_p1 = cnn_1_out_load_reg_321;

assign exitcond1_fu_175_p2 = ((i_reg_104 == 5'd29) ? 1'b1 : 1'b0);

assign exitcond2_fu_163_p2 = ((k_reg_81 == 6'd47) ? 1'b1 : 1'b0);

assign exitcond_fu_209_p2 = ((j_reg_115 == 4'd8) ? 1'b1 : 1'b0);

assign i_7_fu_181_p2 = (i_reg_104 + 5'd1);

assign j_6_fu_215_p2 = (j_reg_115 + 4'd1);

assign k_6_fu_169_p2 = (k_reg_81 + 6'd1);

assign next_mul_fu_157_p2 = (phi_mul_reg_92 + 11'd29);

assign notlhs_fu_253_p2 = ((tmp_17_fu_239_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_259_p2 = ((tmp_41_fu_249_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_316;

assign output_r_d0 = storemerge_reg_126;

assign tmp_110_cast_fu_205_p1 = tmp_1_fu_197_p3;

assign tmp_111_cast_fu_230_p1 = tmp_67_fu_225_p2;

assign tmp_17_fu_239_p4 = {{cnn_1_out_load_to_in_fu_236_p1[30:23]}};

assign tmp_19_fu_265_p2 = (notrhs_fu_259_p2 | notlhs_fu_253_p2);

assign tmp_1_fu_197_p3 = {{tmp_s_fu_191_p2}, {3'd0}};

assign tmp_21_fu_271_p2 = (tmp_20_fu_142_p2 & tmp_19_fu_265_p2);

assign tmp_36_cast_fu_221_p1 = j_reg_115;

assign tmp_41_fu_249_p1 = cnn_1_out_load_to_in_fu_236_p1[22:0];

assign tmp_67_fu_225_p2 = (tmp_110_cast_reg_298 + tmp_36_cast_fu_221_p1);

assign tmp_cast_fu_187_p1 = i_reg_104;

assign tmp_s_fu_191_p2 = (phi_mul_reg_92 + tmp_cast_fu_187_p1);

always @ (posedge ap_clk) begin
    tmp_110_cast_reg_298[2:0] <= 3'b000;
    tmp_110_cast_reg_298[14] <= 1'b0;
end

endmodule //elu2
