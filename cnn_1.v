// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [14:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] input_r_address0;
reg input_r_ce0;
reg[12:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_397;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
reg   [31:0] reg_402;
reg   [31:0] reg_407;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_389_p2;
reg   [31:0] reg_412;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_393_p2;
reg   [31:0] reg_418;
reg   [31:0] reg_424;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_385_p2;
reg   [31:0] reg_429;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state26;
wire   [3:0] indvarinc_fu_434_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_445_p2;
wire   [6:0] tmp_113_fu_457_p2;
reg   [6:0] tmp_113_reg_878;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_451_p2;
wire   [13:0] tmp_134_fu_487_p2;
reg   [13:0] tmp_134_reg_885;
wire   [6:0] i_12_fu_493_p2;
reg   [6:0] i_12_reg_890;
reg   [12:0] input_addr_reg_901;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_499_p2;
reg   [12:0] input_addr_1_reg_906;
reg   [12:0] input_addr_2_reg_911;
wire   [15:0] tmp_238_cast_fu_557_p3;
reg   [15:0] tmp_238_cast_reg_916;
reg   [12:0] input_addr_3_reg_921;
reg   [12:0] input_addr_4_reg_926;
reg   [12:0] input_addr_5_reg_931;
wire   [5:0] j_10_fu_602_p2;
reg   [5:0] j_10_reg_936;
reg   [12:0] input_addr_6_reg_941;
reg   [12:0] input_addr_7_reg_946;
reg   [12:0] input_addr_8_reg_951;
wire   [2:0] k_12_fu_651_p2;
reg   [2:0] k_12_reg_959;
wire    ap_CS_fsm_state5;
reg   [14:0] output_addr_reg_964;
wire   [0:0] exitcond1_fu_645_p2;
wire   [1:0] tmp_1_10_fu_671_p1;
reg   [1:0] tmp_1_10_reg_969;
wire   [31:0] tmp_27_fu_675_p6;
reg   [31:0] tmp_27_reg_983;
wire   [31:0] tmp_28_fu_688_p6;
reg   [31:0] tmp_28_reg_988;
wire   [31:0] tmp_29_fu_701_p6;
reg   [31:0] tmp_29_reg_993;
reg   [31:0] input_load_3_reg_998;
wire   [31:0] tmp_30_fu_714_p6;
reg   [31:0] tmp_30_reg_1003;
reg   [31:0] input_load_4_reg_1008;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_31_fu_727_p6;
reg   [31:0] tmp_31_reg_1013;
reg   [31:0] input_load_5_reg_1018;
wire   [31:0] tmp_32_fu_740_p6;
reg   [31:0] tmp_32_reg_1023;
wire   [31:0] tmp_33_fu_753_p6;
reg   [31:0] tmp_33_reg_1028;
wire   [31:0] tmp_34_fu_766_p6;
reg   [31:0] tmp_34_reg_1033;
wire   [31:0] tmp_35_fu_779_p6;
reg   [31:0] tmp_35_reg_1038;
wire   [3:0] x_3_fu_798_p2;
reg   [3:0] x_3_reg_1046;
wire    ap_CS_fsm_state15;
wire   [0:0] exitcond_fu_792_p2;
wire   [31:0] conv_buf_q0;
reg   [31:0] conv_buf_load_reg_1056;
wire   [31:0] tmp_36_fu_809_p6;
reg   [31:0] tmp_36_reg_1061;
reg   [3:0] conv_buf_address0;
reg    conv_buf_ce0;
reg    conv_buf_we0;
reg   [31:0] conv_buf_d0;
reg   [3:0] conv_buf_address1;
reg    conv_buf_ce1;
reg    conv_buf_we1;
reg   [31:0] conv_buf_d1;
reg   [3:0] invdar_reg_329;
reg   [6:0] i_reg_340;
reg   [5:0] j_reg_352;
reg   [2:0] k_reg_363;
wire    ap_CS_fsm_state27;
reg   [3:0] x_reg_374;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state21;
wire   [63:0] tmp_1_fu_440_p1;
wire   [63:0] tmp_136_fu_522_p1;
wire   [63:0] tmp_138_fu_535_p1;
wire   [63:0] tmp_140_fu_547_p1;
wire   [63:0] tmp_143_fu_572_p1;
wire   [63:0] tmp_145_fu_585_p1;
wire   [63:0] tmp_147_fu_597_p1;
wire   [63:0] tmp_149_fu_615_p1;
wire   [63:0] tmp_151_fu_628_p1;
wire   [63:0] tmp_153_fu_640_p1;
wire   [63:0] tmp_251_cast_fu_666_p1;
wire   [63:0] tmp_127_fu_804_p1;
reg   [31:0] grp_fu_385_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_389_p0;
reg   [31:0] grp_fu_389_p1;
reg   [31:0] grp_fu_393_p0;
reg   [31:0] grp_fu_393_p1;
wire   [12:0] tmp_132_fu_463_p3;
wire   [7:0] tmp_133_fu_475_p3;
wire   [13:0] p_shl_cast_fu_471_p1;
wire   [13:0] p_shl1_cast_fu_483_p1;
wire   [5:0] tmp_114_fu_505_p2;
wire   [12:0] tmp_135_fu_515_p3;
wire   [12:0] tmp_137_fu_527_p3;
wire   [12:0] tmp_139_fu_540_p3;
wire   [13:0] tmp_115_cast_fu_511_p1;
wire   [13:0] tmp_141_fu_552_p2;
wire   [12:0] tmp_142_fu_565_p3;
wire   [12:0] tmp_144_fu_577_p3;
wire   [12:0] tmp_146_fu_590_p3;
wire   [12:0] tmp_148_fu_608_p3;
wire   [12:0] tmp_150_fu_620_p3;
wire   [12:0] tmp_152_fu_633_p3;
wire   [15:0] tmp_116_cast_fu_657_p1;
wire   [15:0] tmp_154_fu_661_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

cnn_1_conv_buf #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_buf_address0),
    .ce0(conv_buf_ce0),
    .we0(conv_buf_we0),
    .d0(conv_buf_d0),
    .q0(conv_buf_q0),
    .address1(conv_buf_address1),
    .ce1(conv_buf_ce1),
    .we1(conv_buf_we1),
    .d1(conv_buf_d1)
);

keywords_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fadd_32nbkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_424),
    .din1(grp_fu_385_p1),
    .ce(1'b1),
    .dout(grp_fu_385_p2)
);

keywords_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fmul_32ncud_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_389_p0),
    .din1(grp_fu_389_p1),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

keywords_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fmul_32ncud_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_393_p0),
    .din1(grp_fu_393_p1),
    .ce(1'b1),
    .dout(grp_fu_393_p2)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U11(
    .din0(32'd1041027998),
    .din1(32'd3188610296),
    .din2(32'd3189981330),
    .din3(32'd1045165930),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_27_fu_675_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U12(
    .din0(32'd1047664930),
    .din1(32'd1033023387),
    .din2(32'd1039209616),
    .din3(32'd3192917678),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_28_fu_688_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U13(
    .din0(32'd1052055460),
    .din1(32'd1050137455),
    .din2(32'd1052246150),
    .din3(32'd1018289501),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_29_fu_701_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U14(
    .din0(32'd3190765430),
    .din1(32'd1036755176),
    .din2(32'd3158663368),
    .din3(32'd1060209959),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_30_fu_714_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U15(
    .din0(32'd3194778137),
    .din1(32'd3195775442),
    .din2(32'd3182537212),
    .din3(32'd1058712878),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_31_fu_727_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U16(
    .din0(32'd3200105071),
    .din1(32'd3184853810),
    .din2(32'd3199905389),
    .din3(32'd1040356775),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_32_fu_740_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U17(
    .din0(32'd1051833934),
    .din1(32'd1035488832),
    .din2(32'd1041223419),
    .din3(32'd1044001189),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_33_fu_753_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U18(
    .din0(32'd3168144508),
    .din1(32'd3197124196),
    .din2(32'd3195713635),
    .din3(32'd1061332506),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_34_fu_766_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U19(
    .din0(32'd3200878501),
    .din1(32'd3196394286),
    .din2(32'd3166374982),
    .din3(32'd1059766101),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_35_fu_779_p6)
);

keywords_mux_42_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
keywords_mux_42_3dEe_U20(
    .din0(32'd1048994961),
    .din1(32'd1046649976),
    .din2(32'd1050532760),
    .din3(32'd3191206335),
    .din4(tmp_1_10_reg_969),
    .dout(tmp_36_fu_809_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_499_p2 == 1'd1))) begin
        i_reg_340 <= i_12_reg_890;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_445_p2 == 1'd1))) begin
        i_reg_340 <= 7'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_445_p2 == 1'd0))) begin
        invdar_reg_329 <= indvarinc_fu_434_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_329 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_645_p2 == 1'd1))) begin
        j_reg_352 <= j_10_reg_936;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_451_p2 == 1'd0))) begin
        j_reg_352 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_499_p2 == 1'd0))) begin
        k_reg_363 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        k_reg_363 <= k_12_reg_959;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        x_reg_374 <= x_3_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        x_reg_374 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_buf_load_reg_1056 <= conv_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_451_p2 == 1'd0))) begin
        i_12_reg_890 <= i_12_fu_493_p2;
        tmp_113_reg_878 <= tmp_113_fu_457_p2;
        tmp_134_reg_885[13 : 1] <= tmp_134_fu_487_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_499_p2 == 1'd0))) begin
        input_addr_1_reg_906 <= tmp_138_fu_535_p1;
        input_addr_2_reg_911 <= tmp_140_fu_547_p1;
        input_addr_3_reg_921 <= tmp_143_fu_572_p1;
        input_addr_4_reg_926 <= tmp_145_fu_585_p1;
        input_addr_5_reg_931 <= tmp_147_fu_597_p1;
        input_addr_6_reg_941 <= tmp_149_fu_615_p1;
        input_addr_7_reg_946 <= tmp_151_fu_628_p1;
        input_addr_8_reg_951 <= tmp_153_fu_640_p1;
        input_addr_reg_901 <= tmp_136_fu_522_p1;
        j_10_reg_936 <= j_10_fu_602_p2;
        tmp_238_cast_reg_916[15 : 2] <= tmp_238_cast_fu_557_p3[15 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_3_reg_998 <= input_r_q1;
        tmp_29_reg_993 <= tmp_29_fu_701_p6;
        tmp_30_reg_1003 <= tmp_30_fu_714_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_4_reg_1008 <= input_r_q0;
        input_load_5_reg_1018 <= input_r_q1;
        tmp_31_reg_1013 <= tmp_31_fu_727_p6;
        tmp_32_reg_1023 <= tmp_32_fu_740_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_12_reg_959 <= k_12_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_645_p2 == 1'd0))) begin
        output_addr_reg_964 <= tmp_251_cast_fu_666_p1;
        tmp_1_10_reg_969 <= tmp_1_10_fu_671_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_397 <= input_r_q0;
        reg_402 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_407 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_412 <= grp_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_418 <= grp_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_424 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_429 <= grp_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_27_reg_983 <= tmp_27_fu_675_p6;
        tmp_28_reg_988 <= tmp_28_fu_688_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_33_reg_1028 <= tmp_33_fu_753_p6;
        tmp_34_reg_1033 <= tmp_34_fu_766_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_35_reg_1038 <= tmp_35_fu_779_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_36_reg_1061 <= tmp_36_fu_809_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x_3_reg_1046 <= x_3_fu_798_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_451_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_451_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_buf_address0 = tmp_127_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_buf_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_buf_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_buf_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_buf_address0 = tmp_1_fu_440_p1;
    end else begin
        conv_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_buf_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_buf_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_buf_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_buf_address1 = 64'd1;
    end else begin
        conv_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_ce0 = 1'b1;
    end else begin
        conv_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_ce1 = 1'b1;
    end else begin
        conv_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_d0 = reg_418;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_buf_d0 = reg_412;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_buf_d0 = 32'd0;
    end else begin
        conv_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_d1 = reg_412;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_buf_d1 = reg_418;
    end else begin
        conv_buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_we0 = 1'b1;
    end else begin
        conv_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_we1 = 1'b1;
    end else begin
        conv_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_385_p1 = tmp_36_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_385_p1 = conv_buf_load_reg_1056;
    end else begin
        grp_fu_385_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_389_p0 = input_load_4_reg_1008;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_389_p0 = reg_407;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_389_p0 = reg_397;
    end else begin
        grp_fu_389_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_389_p1 = tmp_35_reg_1038;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_389_p1 = tmp_33_reg_1028;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_389_p1 = tmp_31_reg_1013;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_389_p1 = tmp_29_reg_993;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_389_p1 = tmp_27_reg_983;
    end else begin
        grp_fu_389_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_393_p0 = input_load_5_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_393_p0 = input_load_3_reg_998;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_393_p0 = reg_402;
    end else begin
        grp_fu_393_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_393_p1 = tmp_34_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_393_p1 = tmp_32_reg_1023;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_393_p1 = tmp_30_reg_1003;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_393_p1 = tmp_28_reg_988;
    end else begin
        grp_fu_393_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = input_addr_8_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = input_addr_6_reg_941;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = input_addr_4_reg_926;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = input_addr_2_reg_911;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = input_addr_reg_901;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = input_addr_7_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address1 = input_addr_5_reg_931;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address1 = input_addr_3_reg_921;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address1 = input_addr_1_reg_906;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_792_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_792_p2 == 1'd0)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_451_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_499_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_645_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_792_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_645_p2 = ((k_reg_363 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_499_p2 = ((j_reg_352 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond3_fu_451_p2 = ((i_reg_340 == 7'd99) ? 1'b1 : 1'b0);

assign exitcond_fu_792_p2 = ((x_reg_374 == 4'd9) ? 1'b1 : 1'b0);

assign i_12_fu_493_p2 = (i_reg_340 + 7'd1);

assign indvarinc_fu_434_p2 = (invdar_reg_329 + 4'd1);

assign j_10_fu_602_p2 = (j_reg_352 + 6'd1);

assign k_12_fu_651_p2 = (k_reg_363 + 3'd1);

assign output_r_address0 = output_addr_reg_964;

assign output_r_d0 = reg_429;

assign p_shl1_cast_fu_483_p1 = tmp_133_fu_475_p3;

assign p_shl_cast_fu_471_p1 = tmp_132_fu_463_p3;

assign tmp_113_fu_457_p2 = ($signed(i_reg_340) + $signed(7'd127));

assign tmp_114_fu_505_p2 = ($signed(j_reg_352) + $signed(6'd63));

assign tmp_115_cast_fu_511_p1 = tmp_114_fu_505_p2;

assign tmp_116_cast_fu_657_p1 = k_reg_363;

assign tmp_127_fu_804_p1 = x_reg_374;

assign tmp_132_fu_463_p3 = {{tmp_113_fu_457_p2}, {6'd0}};

assign tmp_133_fu_475_p3 = {{tmp_113_fu_457_p2}, {1'd0}};

assign tmp_134_fu_487_p2 = (p_shl_cast_fu_471_p1 - p_shl1_cast_fu_483_p1);

assign tmp_135_fu_515_p3 = {{tmp_113_reg_878}, {tmp_114_fu_505_p2}};

assign tmp_136_fu_522_p1 = tmp_135_fu_515_p3;

assign tmp_137_fu_527_p3 = {{i_reg_340}, {tmp_114_fu_505_p2}};

assign tmp_138_fu_535_p1 = tmp_137_fu_527_p3;

assign tmp_139_fu_540_p3 = {{i_12_reg_890}, {tmp_114_fu_505_p2}};

assign tmp_140_fu_547_p1 = tmp_139_fu_540_p3;

assign tmp_141_fu_552_p2 = (tmp_134_reg_885 + tmp_115_cast_fu_511_p1);

assign tmp_142_fu_565_p3 = {{tmp_113_reg_878}, {j_reg_352}};

assign tmp_143_fu_572_p1 = tmp_142_fu_565_p3;

assign tmp_144_fu_577_p3 = {{i_reg_340}, {j_reg_352}};

assign tmp_145_fu_585_p1 = tmp_144_fu_577_p3;

assign tmp_146_fu_590_p3 = {{i_12_reg_890}, {j_reg_352}};

assign tmp_147_fu_597_p1 = tmp_146_fu_590_p3;

assign tmp_148_fu_608_p3 = {{tmp_113_reg_878}, {j_10_fu_602_p2}};

assign tmp_149_fu_615_p1 = tmp_148_fu_608_p3;

assign tmp_150_fu_620_p3 = {{i_reg_340}, {j_10_fu_602_p2}};

assign tmp_151_fu_628_p1 = tmp_150_fu_620_p3;

assign tmp_152_fu_633_p3 = {{i_12_reg_890}, {j_10_fu_602_p2}};

assign tmp_153_fu_640_p1 = tmp_152_fu_633_p3;

assign tmp_154_fu_661_p2 = (tmp_238_cast_reg_916 + tmp_116_cast_fu_657_p1);

assign tmp_1_10_fu_671_p1 = k_reg_363[1:0];

assign tmp_1_fu_440_p1 = invdar_reg_329;

assign tmp_238_cast_fu_557_p3 = {{tmp_141_fu_552_p2}, {2'd0}};

assign tmp_251_cast_fu_666_p1 = tmp_154_fu_661_p2;

assign tmp_s_fu_445_p2 = ((invdar_reg_329 == 4'd8) ? 1'b1 : 1'b0);

assign x_3_fu_798_p2 = (x_reg_374 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_134_reg_885[0] <= 1'b0;
    tmp_238_cast_reg_916[1:0] <= 2'b00;
end

endmodule //cnn_1
