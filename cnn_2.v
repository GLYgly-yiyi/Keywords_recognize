// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        poolout_0_address0,
        poolout_0_ce0,
        poolout_0_q0,
        poolout_0_address1,
        poolout_0_ce1,
        poolout_0_q1
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [12:0] poolout_0_address0;
output   poolout_0_ce0;
input  [31:0] poolout_0_q0;
output  [12:0] poolout_0_address1;
output   poolout_0_ce1;
input  [31:0] poolout_0_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg[12:0] poolout_0_address0;
reg poolout_0_ce0;
reg[12:0] poolout_0_address1;
reg poolout_0_ce1;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] b_weight_1_address0;
reg    b_weight_1_ce0;
wire   [31:0] b_weight_1_q0;
wire   [4:0] weights_1_0_address0;
reg    weights_1_0_ce0;
wire   [31:0] weights_1_0_q0;
wire   [4:0] weights_1_1_address0;
reg    weights_1_1_ce0;
wire   [31:0] weights_1_1_q0;
wire   [4:0] weights_1_2_address0;
reg    weights_1_2_ce0;
wire   [31:0] weights_1_2_q0;
wire   [4:0] weights_1_3_address0;
reg    weights_1_3_ce0;
wire   [31:0] weights_1_3_q0;
wire   [4:0] weights_1_4_address0;
reg    weights_1_4_ce0;
wire   [31:0] weights_1_4_q0;
wire   [4:0] weights_1_5_address0;
reg    weights_1_5_ce0;
wire   [31:0] weights_1_5_q0;
wire   [4:0] weights_1_6_address0;
reg    weights_1_6_ce0;
wire   [31:0] weights_1_6_q0;
wire   [4:0] weights_1_7_address0;
reg    weights_1_7_ce0;
wire   [31:0] weights_1_7_q0;
wire   [4:0] weights_1_8_address0;
reg    weights_1_8_ce0;
wire   [31:0] weights_1_8_q0;
reg   [31:0] reg_489;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
reg   [31:0] reg_494;
reg   [31:0] reg_499;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_481_p2;
reg   [31:0] reg_504;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_485_p2;
reg   [31:0] reg_510;
reg   [31:0] reg_516;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_477_p2;
reg   [31:0] reg_521;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state28;
wire   [3:0] indvarinc_fu_526_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_537_p2;
wire   [3:0] k_11_fu_549_p2;
reg   [3:0] k_11_reg_1059;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond4_fu_543_p2;
wire   [14:0] tmp_91_cast_fu_560_p1;
reg   [14:0] tmp_91_cast_reg_1069;
wire    ap_CS_fsm_state4;
wire   [6:0] tmp_178_cast_fu_572_p1;
reg   [6:0] tmp_178_cast_reg_1074;
reg   [31:0] b_weight_1_load_reg_1079;
wire   [11:0] tmp_115_fu_604_p2;
reg   [11:0] tmp_115_reg_1087;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond3_fu_576_p2;
wire   [10:0] tmp_61_fu_614_p2;
reg   [10:0] tmp_61_reg_1094;
wire   [11:0] tmp_117_fu_636_p2;
reg   [11:0] tmp_117_reg_1099;
wire   [5:0] i_11_fu_642_p2;
reg   [5:0] i_11_reg_1106;
wire   [11:0] tmp_119_fu_664_p2;
reg   [11:0] tmp_119_reg_1111;
wire   [13:0] tmp_188_cast_fu_695_p3;
reg   [13:0] tmp_188_cast_reg_1121;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond2_fu_670_p2;
wire   [13:0] tmp_191_cast_fu_712_p3;
reg   [13:0] tmp_191_cast_reg_1126;
wire   [13:0] tmp_194_cast_fu_729_p3;
reg   [13:0] tmp_194_cast_reg_1131;
reg   [13:0] output_addr_reg_1136;
wire   [13:0] tmp_201_cast_fu_773_p3;
reg   [13:0] tmp_201_cast_reg_1141;
wire   [13:0] tmp_204_cast_fu_790_p3;
reg   [13:0] tmp_204_cast_reg_1146;
wire   [13:0] tmp_207_cast_fu_807_p3;
reg   [13:0] tmp_207_cast_reg_1151;
wire   [4:0] j_9_fu_815_p2;
reg   [4:0] j_9_reg_1156;
wire   [13:0] tmp_210_cast_fu_830_p3;
reg   [13:0] tmp_210_cast_reg_1161;
wire   [13:0] tmp_213_cast_fu_847_p3;
reg   [13:0] tmp_213_cast_reg_1166;
wire   [13:0] tmp_216_cast_fu_864_p3;
reg   [13:0] tmp_216_cast_reg_1171;
wire   [2:0] t_2_fu_878_p2;
reg   [2:0] t_2_reg_1179;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond1_fu_872_p2;
wire   [13:0] tmp_124_fu_912_p2;
reg   [13:0] tmp_124_reg_1194;
wire   [13:0] tmp_125_fu_917_p2;
reg   [13:0] tmp_125_reg_1199;
wire   [13:0] tmp_126_fu_922_p2;
reg   [13:0] tmp_126_reg_1204;
wire   [13:0] tmp_127_fu_927_p2;
reg   [13:0] tmp_127_reg_1209;
wire   [13:0] tmp_128_fu_932_p2;
reg   [13:0] tmp_128_reg_1214;
wire   [13:0] tmp_129_fu_937_p2;
reg   [13:0] tmp_129_reg_1219;
wire   [13:0] tmp_130_fu_942_p2;
reg   [13:0] tmp_130_reg_1224;
wire   [63:0] tmp_226_cast_fu_952_p1;
reg   [63:0] tmp_226_cast_reg_1229;
reg   [31:0] weights_1_0_load_reg_1270;
reg   [31:0] weights_1_1_load_reg_1275;
reg   [31:0] weights_1_2_load_reg_1300;
reg   [31:0] poolout_0_load_3_reg_1305;
reg   [31:0] weights_1_3_load_reg_1310;
wire    ap_CS_fsm_state10;
reg   [31:0] poolout_0_load_4_reg_1340;
reg   [31:0] weights_1_4_load_reg_1345;
reg   [31:0] poolout_0_load_5_reg_1350;
reg   [31:0] weights_1_5_load_reg_1355;
reg   [31:0] weights_1_6_load_reg_1365;
reg   [31:0] weights_1_7_load_reg_1370;
reg   [31:0] weights_1_8_load_reg_1375;
wire   [3:0] x_2_fu_992_p2;
reg   [3:0] x_2_reg_1383;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond_fu_986_p2;
wire   [31:0] conv_buf_q0;
reg   [31:0] conv_buf_load_reg_1393;
reg   [3:0] conv_buf_address0;
reg    conv_buf_ce0;
reg    conv_buf_we0;
reg   [31:0] conv_buf_d0;
reg   [3:0] conv_buf_address1;
reg    conv_buf_ce1;
reg    conv_buf_we1;
reg   [31:0] conv_buf_d1;
reg   [3:0] invdar_reg_410;
reg   [3:0] k_reg_421;
reg   [5:0] i_reg_433;
reg   [4:0] j_reg_444;
wire    ap_CS_fsm_state29;
reg   [2:0] t_reg_455;
reg   [3:0] x_reg_466;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_1_fu_532_p1;
wire   [63:0] tmp_91_fu_555_p1;
wire   [63:0] tmp_198_cast_fu_759_p1;
wire   [63:0] tmp_217_cast_fu_897_p1;
wire   [63:0] tmp_218_cast_fu_907_p1;
wire   [63:0] tmp_219_cast_fu_958_p1;
wire   [63:0] tmp_220_cast_fu_962_p1;
wire   [63:0] tmp_221_cast_fu_966_p1;
wire   [63:0] tmp_222_cast_fu_970_p1;
wire   [63:0] tmp_223_cast_fu_974_p1;
wire   [63:0] tmp_224_cast_fu_978_p1;
wire   [63:0] tmp_225_cast_fu_982_p1;
wire   [63:0] tmp_111_fu_998_p1;
reg   [31:0] grp_fu_477_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_481_p0;
reg   [31:0] grp_fu_481_p1;
reg   [31:0] grp_fu_485_p0;
reg   [31:0] grp_fu_485_p1;
wire   [5:0] tmp_113_fu_564_p3;
wire   [5:0] tmp_92_fu_582_p2;
wire   [10:0] tmp_114_fu_592_p3;
wire   [11:0] p_shl2_cast_fu_600_p1;
wire   [11:0] tmp_93_cast_fu_588_p1;
wire   [5:0] tmp_61_fu_614_p0;
wire   [10:0] tmp_116_fu_624_p3;
wire   [11:0] p_shl1_cast_fu_632_p1;
wire   [11:0] tmp_94_cast_fu_620_p1;
wire   [10:0] tmp_118_fu_652_p3;
wire   [11:0] p_shl_cast_fu_660_p1;
wire   [11:0] tmp_95_cast_fu_648_p1;
wire   [4:0] tmp_96_fu_676_p2;
wire   [11:0] tmp_62_fu_686_p1;
wire   [11:0] tmp_63_fu_690_p2;
wire   [11:0] tmp_64_fu_703_p1;
wire   [11:0] tmp_65_fu_707_p2;
wire   [11:0] tmp_66_fu_720_p1;
wire   [11:0] tmp_67_fu_724_p2;
wire   [10:0] tmp_97_cast4_fu_682_p1;
wire   [10:0] tmp_120_fu_737_p2;
wire   [13:0] tmp_68_fu_742_p3;
wire   [14:0] tmp_197_cast_fu_750_p1;
wire   [14:0] tmp_121_fu_754_p2;
wire   [11:0] tmp_69_fu_764_p1;
wire   [11:0] tmp_70_fu_768_p2;
wire   [11:0] tmp_71_fu_781_p1;
wire   [11:0] tmp_72_fu_785_p2;
wire   [11:0] tmp_73_fu_798_p1;
wire   [11:0] tmp_74_fu_802_p2;
wire   [11:0] tmp_75_fu_821_p1;
wire   [11:0] tmp_76_fu_825_p2;
wire   [11:0] tmp_77_fu_838_p1;
wire   [11:0] tmp_78_fu_842_p2;
wire   [11:0] tmp_79_fu_855_p1;
wire   [11:0] tmp_80_fu_859_p2;
wire   [13:0] tmp_101_cast_fu_888_p1;
wire   [13:0] tmp_122_fu_892_p2;
wire   [13:0] tmp_123_fu_902_p2;
wire   [6:0] tmp_101_cast3_fu_884_p1;
wire   [6:0] tmp_131_fu_947_p2;
reg   [28:0] ap_NS_fsm;
wire   [10:0] tmp_61_fu_614_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

cnn_2_b_weight_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
b_weight_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_weight_1_address0),
    .ce0(b_weight_1_ce0),
    .q0(b_weight_1_q0)
);

cnn_2_weights_1_0 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_0_address0),
    .ce0(weights_1_0_ce0),
    .q0(weights_1_0_q0)
);

cnn_2_weights_1_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_1_address0),
    .ce0(weights_1_1_ce0),
    .q0(weights_1_1_q0)
);

cnn_2_weights_1_2 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_2_address0),
    .ce0(weights_1_2_ce0),
    .q0(weights_1_2_q0)
);

cnn_2_weights_1_3 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_3_address0),
    .ce0(weights_1_3_ce0),
    .q0(weights_1_3_q0)
);

cnn_2_weights_1_4 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_4_address0),
    .ce0(weights_1_4_ce0),
    .q0(weights_1_4_q0)
);

cnn_2_weights_1_5 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_5_address0),
    .ce0(weights_1_5_ce0),
    .q0(weights_1_5_q0)
);

cnn_2_weights_1_6 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_6_address0),
    .ce0(weights_1_6_ce0),
    .q0(weights_1_6_q0)
);

cnn_2_weights_1_7 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_7_address0),
    .ce0(weights_1_7_ce0),
    .q0(weights_1_7_q0)
);

cnn_2_weights_1_8 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
weights_1_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_1_8_address0),
    .ce0(weights_1_8_ce0),
    .q0(weights_1_8_q0)
);

cnn_1_conv_buf #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_buf_address0),
    .ce0(conv_buf_ce0),
    .we0(conv_buf_we0),
    .d0(conv_buf_d0),
    .q0(conv_buf_q0),
    .address1(conv_buf_address1),
    .ce1(conv_buf_ce1),
    .we1(conv_buf_we1),
    .d1(conv_buf_d1)
);

keywords_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fadd_32nbkb_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_516),
    .din1(grp_fu_477_p1),
    .ce(1'b1),
    .dout(grp_fu_477_p2)
);

keywords_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fmul_32ncud_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_481_p0),
    .din1(grp_fu_481_p1),
    .ce(1'b1),
    .dout(grp_fu_481_p2)
);

keywords_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
keywords_fmul_32ncud_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_485_p0),
    .din1(grp_fu_485_p1),
    .ce(1'b1),
    .dout(grp_fu_485_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_670_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_433 <= i_11_reg_1106;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_433 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_537_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_410 <= indvarinc_fu_526_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_410 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_444 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        j_reg_444 <= j_9_reg_1156;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_reg_421 <= k_11_reg_1059;
    end else if (((tmp_s_fu_537_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_421 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_986_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        t_reg_455 <= t_2_reg_1179;
    end else if (((exitcond2_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_reg_455 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        x_reg_466 <= x_2_reg_1383;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x_reg_466 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_weight_1_load_reg_1079 <= b_weight_1_q0;
        tmp_178_cast_reg_1074[5 : 2] <= tmp_178_cast_fu_572_p1[5 : 2];
        tmp_91_cast_reg_1069[3 : 0] <= tmp_91_cast_fu_560_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_buf_load_reg_1393 <= conv_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_11_reg_1106 <= i_11_fu_642_p2;
        tmp_115_reg_1087 <= tmp_115_fu_604_p2;
        tmp_117_reg_1099 <= tmp_117_fu_636_p2;
        tmp_119_reg_1111 <= tmp_119_fu_664_p2;
        tmp_61_reg_1094 <= tmp_61_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_9_reg_1156 <= j_9_fu_815_p2;
        output_addr_reg_1136 <= tmp_198_cast_fu_759_p1;
        tmp_188_cast_reg_1121[13 : 2] <= tmp_188_cast_fu_695_p3[13 : 2];
        tmp_191_cast_reg_1126[13 : 2] <= tmp_191_cast_fu_712_p3[13 : 2];
        tmp_194_cast_reg_1131[13 : 2] <= tmp_194_cast_fu_729_p3[13 : 2];
        tmp_201_cast_reg_1141[13 : 2] <= tmp_201_cast_fu_773_p3[13 : 2];
        tmp_204_cast_reg_1146[13 : 2] <= tmp_204_cast_fu_790_p3[13 : 2];
        tmp_207_cast_reg_1151[13 : 2] <= tmp_207_cast_fu_807_p3[13 : 2];
        tmp_210_cast_reg_1161[13 : 2] <= tmp_210_cast_fu_830_p3[13 : 2];
        tmp_213_cast_reg_1166[13 : 2] <= tmp_213_cast_fu_847_p3[13 : 2];
        tmp_216_cast_reg_1171[13 : 2] <= tmp_216_cast_fu_864_p3[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_11_reg_1059 <= k_11_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_0_load_3_reg_1305 <= poolout_0_q1;
        weights_1_2_load_reg_1300 <= weights_1_2_q0;
        weights_1_3_load_reg_1310 <= weights_1_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        poolout_0_load_4_reg_1340 <= poolout_0_q0;
        poolout_0_load_5_reg_1350 <= poolout_0_q1;
        weights_1_4_load_reg_1345 <= weights_1_4_q0;
        weights_1_5_load_reg_1355 <= weights_1_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_489 <= poolout_0_q0;
        reg_494 <= poolout_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_499 <= poolout_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_504 <= grp_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_510 <= grp_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_516 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_521 <= grp_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_2_reg_1179 <= t_2_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_124_reg_1194 <= tmp_124_fu_912_p2;
        tmp_125_reg_1199 <= tmp_125_fu_917_p2;
        tmp_126_reg_1204 <= tmp_126_fu_922_p2;
        tmp_127_reg_1209 <= tmp_127_fu_927_p2;
        tmp_128_reg_1214 <= tmp_128_fu_932_p2;
        tmp_129_reg_1219 <= tmp_129_fu_937_p2;
        tmp_130_reg_1224 <= tmp_130_fu_942_p2;
        tmp_226_cast_reg_1229[6 : 0] <= tmp_226_cast_fu_952_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_1_0_load_reg_1270 <= weights_1_0_q0;
        weights_1_1_load_reg_1275 <= weights_1_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_1_6_load_reg_1365 <= weights_1_6_q0;
        weights_1_7_load_reg_1370 <= weights_1_7_q0;
        weights_1_8_load_reg_1375 <= weights_1_8_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        x_2_reg_1383 <= x_2_fu_992_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond4_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_weight_1_ce0 = 1'b1;
    end else begin
        b_weight_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_buf_address0 = tmp_111_fu_998_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_buf_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_buf_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_buf_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_buf_address0 = tmp_1_fu_532_p1;
    end else begin
        conv_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_buf_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_buf_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_buf_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_buf_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_address1 = 64'd1;
    end else begin
        conv_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_ce0 = 1'b1;
    end else begin
        conv_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_ce1 = 1'b1;
    end else begin
        conv_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        conv_buf_d0 = reg_510;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_d0 = reg_504;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_buf_d0 = 32'd0;
    end else begin
        conv_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        conv_buf_d1 = reg_504;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_buf_d1 = reg_510;
    end else begin
        conv_buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_we0 = 1'b1;
    end else begin
        conv_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        conv_buf_we1 = 1'b1;
    end else begin
        conv_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_477_p1 = b_weight_1_load_reg_1079;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_477_p1 = conv_buf_load_reg_1393;
    end else begin
        grp_fu_477_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_481_p0 = poolout_0_load_4_reg_1340;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_481_p0 = reg_499;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_481_p0 = reg_489;
    end else begin
        grp_fu_481_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_481_p1 = weights_1_8_load_reg_1375;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_481_p1 = weights_1_6_load_reg_1365;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_481_p1 = weights_1_4_load_reg_1345;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_481_p1 = weights_1_2_load_reg_1300;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_481_p1 = weights_1_0_load_reg_1270;
    end else begin
        grp_fu_481_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_485_p0 = poolout_0_load_5_reg_1350;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_485_p0 = poolout_0_load_3_reg_1305;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_485_p0 = reg_494;
    end else begin
        grp_fu_485_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_485_p1 = weights_1_7_load_reg_1370;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_485_p1 = weights_1_5_load_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_485_p1 = weights_1_3_load_reg_1310;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_485_p1 = weights_1_1_load_reg_1275;
    end else begin
        grp_fu_485_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        poolout_0_address0 = tmp_225_cast_fu_982_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        poolout_0_address0 = tmp_223_cast_fu_974_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_0_address0 = tmp_221_cast_fu_966_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        poolout_0_address0 = tmp_219_cast_fu_958_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        poolout_0_address0 = tmp_217_cast_fu_897_p1;
    end else begin
        poolout_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        poolout_0_address1 = tmp_224_cast_fu_978_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        poolout_0_address1 = tmp_222_cast_fu_970_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        poolout_0_address1 = tmp_220_cast_fu_962_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        poolout_0_address1 = tmp_218_cast_fu_907_p1;
    end else begin
        poolout_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        poolout_0_ce0 = 1'b1;
    end else begin
        poolout_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        poolout_0_ce1 = 1'b1;
    end else begin
        poolout_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_1_0_ce0 = 1'b1;
    end else begin
        weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_1_1_ce0 = 1'b1;
    end else begin
        weights_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_1_2_ce0 = 1'b1;
    end else begin
        weights_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_1_3_ce0 = 1'b1;
    end else begin
        weights_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_1_4_ce0 = 1'b1;
    end else begin
        weights_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_1_5_ce0 = 1'b1;
    end else begin
        weights_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_1_6_ce0 = 1'b1;
    end else begin
        weights_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_1_7_ce0 = 1'b1;
    end else begin
        weights_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_1_8_ce0 = 1'b1;
    end else begin
        weights_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_537_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond4_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond3_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond2_fu_670_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond1_fu_872_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((exitcond_fu_986_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_weight_1_address0 = tmp_91_fu_555_p1;

assign exitcond1_fu_872_p2 = ((t_reg_455 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_670_p2 = ((j_reg_444 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond3_fu_576_p2 = ((i_reg_433 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond4_fu_543_p2 = ((k_reg_421 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_986_p2 = ((x_reg_466 == 4'd9) ? 1'b1 : 1'b0);

assign i_11_fu_642_p2 = (i_reg_433 + 6'd1);

assign indvarinc_fu_526_p2 = (invdar_reg_410 + 4'd1);

assign j_9_fu_815_p2 = (j_reg_444 + 5'd1);

assign k_11_fu_549_p2 = (k_reg_421 + 4'd1);

assign output_r_address0 = output_addr_reg_1136;

assign output_r_d0 = reg_521;

assign p_shl1_cast_fu_632_p1 = tmp_116_fu_624_p3;

assign p_shl2_cast_fu_600_p1 = tmp_114_fu_592_p3;

assign p_shl_cast_fu_660_p1 = tmp_118_fu_652_p3;

assign t_2_fu_878_p2 = (t_reg_455 + 3'd1);

assign tmp_101_cast3_fu_884_p1 = t_reg_455;

assign tmp_101_cast_fu_888_p1 = t_reg_455;

assign tmp_111_fu_998_p1 = x_reg_466;

assign tmp_113_fu_564_p3 = {{k_reg_421}, {2'd0}};

assign tmp_114_fu_592_p3 = {{tmp_92_fu_582_p2}, {5'd0}};

assign tmp_115_fu_604_p2 = (p_shl2_cast_fu_600_p1 - tmp_93_cast_fu_588_p1);

assign tmp_116_fu_624_p3 = {{i_reg_433}, {5'd0}};

assign tmp_117_fu_636_p2 = (p_shl1_cast_fu_632_p1 - tmp_94_cast_fu_620_p1);

assign tmp_118_fu_652_p3 = {{i_11_fu_642_p2}, {5'd0}};

assign tmp_119_fu_664_p2 = (p_shl_cast_fu_660_p1 - tmp_95_cast_fu_648_p1);

assign tmp_120_fu_737_p2 = (tmp_61_reg_1094 + tmp_97_cast4_fu_682_p1);

assign tmp_121_fu_754_p2 = (tmp_197_cast_fu_750_p1 + tmp_91_cast_reg_1069);

assign tmp_122_fu_892_p2 = (tmp_188_cast_reg_1121 + tmp_101_cast_fu_888_p1);

assign tmp_123_fu_902_p2 = (tmp_191_cast_reg_1126 + tmp_101_cast_fu_888_p1);

assign tmp_124_fu_912_p2 = (tmp_194_cast_reg_1131 + tmp_101_cast_fu_888_p1);

assign tmp_125_fu_917_p2 = (tmp_201_cast_reg_1141 + tmp_101_cast_fu_888_p1);

assign tmp_126_fu_922_p2 = (tmp_204_cast_reg_1146 + tmp_101_cast_fu_888_p1);

assign tmp_127_fu_927_p2 = (tmp_207_cast_reg_1151 + tmp_101_cast_fu_888_p1);

assign tmp_128_fu_932_p2 = (tmp_210_cast_reg_1161 + tmp_101_cast_fu_888_p1);

assign tmp_129_fu_937_p2 = (tmp_213_cast_reg_1166 + tmp_101_cast_fu_888_p1);

assign tmp_130_fu_942_p2 = (tmp_216_cast_reg_1171 + tmp_101_cast_fu_888_p1);

assign tmp_131_fu_947_p2 = (tmp_178_cast_reg_1074 + tmp_101_cast3_fu_884_p1);

assign tmp_178_cast_fu_572_p1 = tmp_113_fu_564_p3;

assign tmp_188_cast_fu_695_p3 = {{tmp_63_fu_690_p2}, {2'd0}};

assign tmp_191_cast_fu_712_p3 = {{tmp_65_fu_707_p2}, {2'd0}};

assign tmp_194_cast_fu_729_p3 = {{tmp_67_fu_724_p2}, {2'd0}};

assign tmp_197_cast_fu_750_p1 = tmp_68_fu_742_p3;

assign tmp_198_cast_fu_759_p1 = tmp_121_fu_754_p2;

assign tmp_1_fu_532_p1 = invdar_reg_410;

assign tmp_201_cast_fu_773_p3 = {{tmp_70_fu_768_p2}, {2'd0}};

assign tmp_204_cast_fu_790_p3 = {{tmp_72_fu_785_p2}, {2'd0}};

assign tmp_207_cast_fu_807_p3 = {{tmp_74_fu_802_p2}, {2'd0}};

assign tmp_210_cast_fu_830_p3 = {{tmp_76_fu_825_p2}, {2'd0}};

assign tmp_213_cast_fu_847_p3 = {{tmp_78_fu_842_p2}, {2'd0}};

assign tmp_216_cast_fu_864_p3 = {{tmp_80_fu_859_p2}, {2'd0}};

assign tmp_217_cast_fu_897_p1 = tmp_122_fu_892_p2;

assign tmp_218_cast_fu_907_p1 = tmp_123_fu_902_p2;

assign tmp_219_cast_fu_958_p1 = tmp_124_reg_1194;

assign tmp_220_cast_fu_962_p1 = tmp_125_reg_1199;

assign tmp_221_cast_fu_966_p1 = tmp_126_reg_1204;

assign tmp_222_cast_fu_970_p1 = tmp_127_reg_1209;

assign tmp_223_cast_fu_974_p1 = tmp_128_reg_1214;

assign tmp_224_cast_fu_978_p1 = tmp_129_reg_1219;

assign tmp_225_cast_fu_982_p1 = tmp_130_reg_1224;

assign tmp_226_cast_fu_952_p1 = tmp_131_fu_947_p2;

assign tmp_61_fu_614_p0 = tmp_61_fu_614_p00;

assign tmp_61_fu_614_p00 = tmp_92_fu_582_p2;

assign tmp_61_fu_614_p2 = (tmp_61_fu_614_p0 * $signed('h1D));

assign tmp_62_fu_686_p1 = tmp_96_fu_676_p2;

assign tmp_63_fu_690_p2 = (tmp_115_reg_1087 + tmp_62_fu_686_p1);

assign tmp_64_fu_703_p1 = tmp_96_fu_676_p2;

assign tmp_65_fu_707_p2 = (tmp_117_reg_1099 + tmp_64_fu_703_p1);

assign tmp_66_fu_720_p1 = tmp_96_fu_676_p2;

assign tmp_67_fu_724_p2 = (tmp_119_reg_1111 + tmp_66_fu_720_p1);

assign tmp_68_fu_742_p3 = {{tmp_120_fu_737_p2}, {3'd0}};

assign tmp_69_fu_764_p1 = j_reg_444;

assign tmp_70_fu_768_p2 = (tmp_115_reg_1087 + tmp_69_fu_764_p1);

assign tmp_71_fu_781_p1 = j_reg_444;

assign tmp_72_fu_785_p2 = (tmp_117_reg_1099 + tmp_71_fu_781_p1);

assign tmp_73_fu_798_p1 = j_reg_444;

assign tmp_74_fu_802_p2 = (tmp_119_reg_1111 + tmp_73_fu_798_p1);

assign tmp_75_fu_821_p1 = j_9_fu_815_p2;

assign tmp_76_fu_825_p2 = (tmp_115_reg_1087 + tmp_75_fu_821_p1);

assign tmp_77_fu_838_p1 = j_9_fu_815_p2;

assign tmp_78_fu_842_p2 = (tmp_117_reg_1099 + tmp_77_fu_838_p1);

assign tmp_79_fu_855_p1 = j_9_fu_815_p2;

assign tmp_80_fu_859_p2 = (tmp_119_reg_1111 + tmp_79_fu_855_p1);

assign tmp_91_cast_fu_560_p1 = k_reg_421;

assign tmp_91_fu_555_p1 = k_reg_421;

assign tmp_92_fu_582_p2 = ($signed(i_reg_433) + $signed(6'd63));

assign tmp_93_cast_fu_588_p1 = tmp_92_fu_582_p2;

assign tmp_94_cast_fu_620_p1 = i_reg_433;

assign tmp_95_cast_fu_648_p1 = i_11_fu_642_p2;

assign tmp_96_fu_676_p2 = ($signed(j_reg_444) + $signed(5'd31));

assign tmp_97_cast4_fu_682_p1 = tmp_96_fu_676_p2;

assign tmp_s_fu_537_p2 = ((invdar_reg_410 == 4'd8) ? 1'b1 : 1'b0);

assign weights_1_0_address0 = tmp_226_cast_fu_952_p1;

assign weights_1_1_address0 = tmp_226_cast_fu_952_p1;

assign weights_1_2_address0 = tmp_226_cast_reg_1229;

assign weights_1_3_address0 = tmp_226_cast_reg_1229;

assign weights_1_4_address0 = tmp_226_cast_reg_1229;

assign weights_1_5_address0 = tmp_226_cast_reg_1229;

assign weights_1_6_address0 = tmp_226_cast_reg_1229;

assign weights_1_7_address0 = tmp_226_cast_reg_1229;

assign weights_1_8_address0 = tmp_226_cast_reg_1229;

assign x_2_fu_992_p2 = (x_reg_466 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_91_cast_reg_1069[14:4] <= 11'b00000000000;
    tmp_178_cast_reg_1074[1:0] <= 2'b00;
    tmp_178_cast_reg_1074[6] <= 1'b0;
    tmp_188_cast_reg_1121[1:0] <= 2'b00;
    tmp_191_cast_reg_1126[1:0] <= 2'b00;
    tmp_194_cast_reg_1131[1:0] <= 2'b00;
    tmp_201_cast_reg_1141[1:0] <= 2'b00;
    tmp_204_cast_reg_1146[1:0] <= 2'b00;
    tmp_207_cast_reg_1151[1:0] <= 2'b00;
    tmp_210_cast_reg_1161[1:0] <= 2'b00;
    tmp_213_cast_reg_1166[1:0] <= 2'b00;
    tmp_216_cast_reg_1171[1:0] <= 2'b00;
    tmp_226_cast_reg_1229[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_2
