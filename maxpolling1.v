// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module maxpolling1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        eluout_0_address0,
        eluout_0_ce0,
        eluout_0_q0,
        eluout_0_address1,
        eluout_0_ce1,
        eluout_0_q1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [14:0] eluout_0_address0;
output   eluout_0_ce0;
input  [31:0] eluout_0_q0;
output  [14:0] eluout_0_address1;
output   eluout_0_ce1;
input  [31:0] eluout_0_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg[14:0] eluout_0_address0;
reg eluout_0_ce0;
reg[14:0] eluout_0_address1;
reg eluout_0_ce1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_generic_fmax_double_s_fu_169_ap_return;
reg   [63:0] reg_199;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [5:0] cnti_3_fu_211_p2;
reg   [5:0] cnti_3_reg_490;
wire    ap_CS_fsm_state2;
wire   [13:0] tmp_52_fu_247_p2;
reg   [13:0] tmp_52_reg_495;
wire   [0:0] exitcond2_fu_205_p2;
wire   [13:0] tmp_55_fu_277_p2;
reg   [13:0] tmp_55_reg_501;
wire   [11:0] tmp_57_fu_299_p2;
reg   [11:0] tmp_57_reg_507;
wire   [4:0] cntj_3_fu_311_p2;
reg   [4:0] cntj_3_reg_515;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_83_cast_fu_332_p3;
reg   [15:0] tmp_83_cast_reg_520;
wire   [0:0] exitcond1_fu_305_p2;
wire   [15:0] tmp_86_cast_fu_349_p3;
reg   [15:0] tmp_86_cast_reg_525;
wire   [15:0] tmp_89_cast_fu_366_p3;
reg   [15:0] tmp_89_cast_reg_530;
wire   [15:0] tmp_92_cast_fu_383_p3;
reg   [15:0] tmp_92_cast_reg_535;
wire   [13:0] tmp_95_cast_fu_400_p3;
reg   [13:0] tmp_95_cast_reg_540;
wire   [6:0] i_4_fu_408_p2;
wire   [2:0] k_4_fu_420_p2;
reg   [2:0] k_4_reg_553;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_414_p2;
wire   [15:0] tmp_61_fu_454_p2;
reg   [15:0] tmp_61_reg_568;
wire   [15:0] tmp_62_fu_459_p2;
reg   [15:0] tmp_62_reg_573;
wire   [13:0] tmp_63_fu_464_p2;
reg   [13:0] tmp_63_reg_578;
wire   [5:0] j_4_fu_469_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] eluout_0_load_reg_598;
reg   [31:0] eluout_0_load_1_reg_603;
wire   [63:0] x_assign_fu_185_p1;
reg   [63:0] x_assign_reg_608;
wire    ap_CS_fsm_state6;
wire   [63:0] y_assign_fu_188_p1;
reg   [63:0] y_assign_reg_613;
wire   [63:0] x_assign_5_fu_191_p1;
reg   [63:0] x_assign_5_reg_618;
wire   [63:0] y_assign_5_fu_195_p1;
reg   [63:0] y_assign_5_reg_623;
wire   [63:0] y_assign_6_generic_fmax_double_s_fu_175_ap_return;
reg   [63:0] y_assign_6_reg_628;
wire    grp_generic_fmax_double_s_fu_169_ap_ready;
reg   [63:0] grp_generic_fmax_double_s_fu_169_x;
reg   [63:0] grp_generic_fmax_double_s_fu_169_y;
wire    y_assign_6_generic_fmax_double_s_fu_175_ap_ready;
reg   [6:0] i_reg_112;
reg   [5:0] cnti_reg_124;
reg   [4:0] cntj_reg_135;
reg   [5:0] j_reg_146;
reg   [2:0] k_reg_158;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_96_cast_fu_439_p1;
wire   [63:0] tmp_97_cast_fu_449_p1;
wire   [63:0] tmp_98_cast_fu_475_p1;
wire   [63:0] tmp_99_cast_fu_479_p1;
wire   [63:0] tmp_100_cast_fu_483_p1;
wire   [31:0] tmp_28_fu_181_p1;
wire   [6:0] tmp_1_fu_217_p2;
wire   [12:0] tmp_s_fu_223_p3;
wire   [7:0] tmp_51_fu_235_p3;
wire   [13:0] p_shl3_cast_fu_231_p1;
wire   [13:0] p_shl4_cast_fu_243_p1;
wire   [12:0] tmp_53_fu_253_p3;
wire   [7:0] tmp_54_fu_265_p3;
wire   [13:0] p_shl1_cast_fu_261_p1;
wire   [13:0] p_shl2_cast_fu_273_p1;
wire   [10:0] tmp_56_fu_287_p3;
wire   [11:0] p_shl_cast_fu_295_p1;
wire   [11:0] tmp_cast_fu_283_p1;
wire   [5:0] tmp_23_fu_317_p2;
wire   [13:0] tmp_1_4_fu_323_p1;
wire   [13:0] tmp_32_fu_327_p2;
wire   [13:0] tmp_33_fu_340_p1;
wire   [13:0] tmp_34_fu_344_p2;
wire   [13:0] tmp_35_fu_357_p1;
wire   [13:0] tmp_36_fu_361_p2;
wire   [13:0] tmp_37_fu_374_p1;
wire   [13:0] tmp_38_fu_378_p2;
wire   [11:0] tmp_26_cast_fu_391_p1;
wire   [11:0] tmp_58_fu_395_p2;
wire   [15:0] tmp_27_cast_fu_430_p1;
wire   [15:0] tmp_59_fu_434_p2;
wire   [15:0] tmp_60_fu_444_p2;
wire   [13:0] tmp_27_cast5_fu_426_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

generic_fmax_double_s grp_generic_fmax_double_s_fu_169(
    .ap_ready(grp_generic_fmax_double_s_fu_169_ap_ready),
    .x(grp_generic_fmax_double_s_fu_169_x),
    .y(grp_generic_fmax_double_s_fu_169_y),
    .ap_return(grp_generic_fmax_double_s_fu_169_ap_return)
);

generic_fmax_double_s y_assign_6_generic_fmax_double_s_fu_175(
    .ap_ready(y_assign_6_generic_fmax_double_s_fu_175_ap_ready),
    .x(x_assign_5_reg_618),
    .y(y_assign_5_reg_623),
    .ap_return(y_assign_6_generic_fmax_double_s_fu_175_ap_return)
);

keywords_fptrunc_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
keywords_fptrunc_eOg_U39(
    .din0(reg_199),
    .dout(tmp_28_fu_181_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U40(
    .din0(eluout_0_load_reg_598),
    .dout(x_assign_fu_185_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U41(
    .din0(eluout_0_load_1_reg_603),
    .dout(y_assign_fu_188_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U42(
    .din0(eluout_0_q0),
    .dout(x_assign_5_fu_191_p1)
);

keywords_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
keywords_fpext_32fYi_U43(
    .din0(eluout_0_q1),
    .dout(y_assign_5_fu_195_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        cnti_reg_124 <= cnti_3_reg_490;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cnti_reg_124 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cntj_reg_135 <= 5'd0;
    end else if (((exitcond_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        cntj_reg_135 <= cntj_3_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_112 <= i_4_fu_408_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_112 <= 7'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_146 <= 6'd1;
    end else if (((exitcond_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_146 <= j_4_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_158 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_reg_158 <= k_4_reg_553;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cnti_3_reg_490 <= cnti_3_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cntj_3_reg_515 <= cntj_3_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_0_load_1_reg_603 <= eluout_0_q1;
        eluout_0_load_reg_598 <= eluout_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_4_reg_553 <= k_4_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_199 <= grp_generic_fmax_double_s_fu_169_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_52_reg_495[13 : 1] <= tmp_52_fu_247_p2[13 : 1];
        tmp_55_reg_501[13 : 1] <= tmp_55_fu_277_p2[13 : 1];
        tmp_57_reg_507 <= tmp_57_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_61_reg_568 <= tmp_61_fu_454_p2;
        tmp_62_reg_573 <= tmp_62_fu_459_p2;
        tmp_63_reg_578 <= tmp_63_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_83_cast_reg_520[15 : 2] <= tmp_83_cast_fu_332_p3[15 : 2];
        tmp_86_cast_reg_525[15 : 2] <= tmp_86_cast_fu_349_p3[15 : 2];
        tmp_89_cast_reg_530[15 : 2] <= tmp_89_cast_fu_366_p3[15 : 2];
        tmp_92_cast_reg_535[15 : 2] <= tmp_92_cast_fu_383_p3[15 : 2];
        tmp_95_cast_reg_540[13 : 2] <= tmp_95_cast_fu_400_p3[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_assign_5_reg_618 <= x_assign_5_fu_191_p1;
        x_assign_reg_608 <= x_assign_fu_185_p1;
        y_assign_5_reg_623 <= y_assign_5_fu_195_p1;
        y_assign_reg_613 <= y_assign_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_assign_6_reg_628 <= y_assign_6_generic_fmax_double_s_fu_175_ap_return;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_0_address0 = tmp_98_cast_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        eluout_0_address0 = tmp_96_cast_fu_439_p1;
    end else begin
        eluout_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        eluout_0_address1 = tmp_99_cast_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        eluout_0_address1 = tmp_97_cast_fu_449_p1;
    end else begin
        eluout_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        eluout_0_ce0 = 1'b1;
    end else begin
        eluout_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        eluout_0_ce1 = 1'b1;
    end else begin
        eluout_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_generic_fmax_double_s_fu_169_x = reg_199;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_generic_fmax_double_s_fu_169_x = x_assign_reg_608;
    end else begin
        grp_generic_fmax_double_s_fu_169_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_generic_fmax_double_s_fu_169_y = y_assign_6_reg_628;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_generic_fmax_double_s_fu_169_y = y_assign_reg_613;
    end else begin
        grp_generic_fmax_double_s_fu_169_y = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cnti_3_fu_211_p2 = (cnti_reg_124 + 6'd1);

assign cntj_3_fu_311_p2 = (cntj_reg_135 + 5'd1);

assign exitcond1_fu_305_p2 = ((cntj_reg_135 == 5'd31) ? 1'b1 : 1'b0);

assign exitcond2_fu_205_p2 = ((cnti_reg_124 == 6'd49) ? 1'b1 : 1'b0);

assign exitcond_fu_414_p2 = ((k_reg_158 == 3'd4) ? 1'b1 : 1'b0);

assign i_4_fu_408_p2 = (i_reg_112 + 7'd2);

assign j_4_fu_469_p2 = (j_reg_146 + 6'd2);

assign k_4_fu_420_p2 = (k_reg_158 + 3'd1);

assign output_r_address0 = tmp_100_cast_fu_483_p1;

assign output_r_d0 = tmp_28_fu_181_p1;

assign p_shl1_cast_fu_261_p1 = tmp_53_fu_253_p3;

assign p_shl2_cast_fu_273_p1 = tmp_54_fu_265_p3;

assign p_shl3_cast_fu_231_p1 = tmp_s_fu_223_p3;

assign p_shl4_cast_fu_243_p1 = tmp_51_fu_235_p3;

assign p_shl_cast_fu_295_p1 = tmp_56_fu_287_p3;

assign tmp_100_cast_fu_483_p1 = tmp_63_reg_578;

assign tmp_1_4_fu_323_p1 = tmp_23_fu_317_p2;

assign tmp_1_fu_217_p2 = ($signed(i_reg_112) + $signed(7'd127));

assign tmp_23_fu_317_p2 = ($signed(j_reg_146) + $signed(6'd63));

assign tmp_26_cast_fu_391_p1 = cntj_reg_135;

assign tmp_27_cast5_fu_426_p1 = k_reg_158;

assign tmp_27_cast_fu_430_p1 = k_reg_158;

assign tmp_32_fu_327_p2 = (tmp_1_4_fu_323_p1 + tmp_52_reg_495);

assign tmp_33_fu_340_p1 = tmp_23_fu_317_p2;

assign tmp_34_fu_344_p2 = (tmp_33_fu_340_p1 + tmp_55_reg_501);

assign tmp_35_fu_357_p1 = j_reg_146;

assign tmp_36_fu_361_p2 = (tmp_35_fu_357_p1 + tmp_55_reg_501);

assign tmp_37_fu_374_p1 = j_reg_146;

assign tmp_38_fu_378_p2 = (tmp_37_fu_374_p1 + tmp_52_reg_495);

assign tmp_51_fu_235_p3 = {{tmp_1_fu_217_p2}, {1'd0}};

assign tmp_52_fu_247_p2 = (p_shl3_cast_fu_231_p1 - p_shl4_cast_fu_243_p1);

assign tmp_53_fu_253_p3 = {{i_reg_112}, {6'd0}};

assign tmp_54_fu_265_p3 = {{i_reg_112}, {1'd0}};

assign tmp_55_fu_277_p2 = (p_shl1_cast_fu_261_p1 - p_shl2_cast_fu_273_p1);

assign tmp_56_fu_287_p3 = {{cnti_reg_124}, {5'd0}};

assign tmp_57_fu_299_p2 = (p_shl_cast_fu_295_p1 - tmp_cast_fu_283_p1);

assign tmp_58_fu_395_p2 = (tmp_26_cast_fu_391_p1 + tmp_57_reg_507);

assign tmp_59_fu_434_p2 = (tmp_83_cast_reg_520 + tmp_27_cast_fu_430_p1);

assign tmp_60_fu_444_p2 = (tmp_89_cast_reg_530 + tmp_27_cast_fu_430_p1);

assign tmp_61_fu_454_p2 = (tmp_86_cast_reg_525 + tmp_27_cast_fu_430_p1);

assign tmp_62_fu_459_p2 = (tmp_92_cast_reg_535 + tmp_27_cast_fu_430_p1);

assign tmp_63_fu_464_p2 = (tmp_95_cast_reg_540 + tmp_27_cast5_fu_426_p1);

assign tmp_83_cast_fu_332_p3 = {{tmp_32_fu_327_p2}, {2'd0}};

assign tmp_86_cast_fu_349_p3 = {{tmp_34_fu_344_p2}, {2'd0}};

assign tmp_89_cast_fu_366_p3 = {{tmp_36_fu_361_p2}, {2'd0}};

assign tmp_92_cast_fu_383_p3 = {{tmp_38_fu_378_p2}, {2'd0}};

assign tmp_95_cast_fu_400_p3 = {{tmp_58_fu_395_p2}, {2'd0}};

assign tmp_96_cast_fu_439_p1 = tmp_59_fu_434_p2;

assign tmp_97_cast_fu_449_p1 = tmp_60_fu_444_p2;

assign tmp_98_cast_fu_475_p1 = tmp_61_reg_568;

assign tmp_99_cast_fu_479_p1 = tmp_62_reg_573;

assign tmp_cast_fu_283_p1 = cnti_reg_124;

assign tmp_s_fu_223_p3 = {{tmp_1_fu_217_p2}, {6'd0}};

always @ (posedge ap_clk) begin
    tmp_52_reg_495[0] <= 1'b0;
    tmp_55_reg_501[0] <= 1'b0;
    tmp_83_cast_reg_520[1:0] <= 2'b00;
    tmp_86_cast_reg_525[1:0] <= 2'b00;
    tmp_89_cast_reg_530[1:0] <= 2'b00;
    tmp_92_cast_reg_535[1:0] <= 2'b00;
    tmp_95_cast_reg_540[1:0] <= 2'b00;
end

endmodule //maxpolling1
